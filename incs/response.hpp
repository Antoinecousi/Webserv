/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   response.hpp                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: spayeur <spayeur@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/01/25 13:34:06 by spayeur           #+#    #+#             */
/*   Updated: 2023/02/04 15:01:35 by spayeur          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef RESPONSE_HPP
# define RESPONSE_HPP

/* ************************************************************************** */
/*                                 Libraries                                  */
/* ************************************************************************** */

# include <string>
# include <map>
# include <list>
# include <utility>
# include "Location_block.hpp"
# include "request.hpp"

/* ************************************************************************** */
/*                                   Macros                                   */
/* ************************************************************************** */

# include <sstream>
# define INT_TO_STRING(x) static_cast< std::ostringstream & >((std::ostringstream() << std::dec << x)).str()

/* ************************************************************************** */
/*                                 Structures                                 */
/* ************************************************************************** */

class Request;
class Response
{
	public:

	static std::map<std::string, std::string>	status_code_definitions_constructor()
	{
		std::map<std::string, std::string>	map;

		map.insert(std::pair<std::string, std::string>("100", "Continue"));
		map.insert(std::pair<std::string, std::string>("101", "Switching Protocols"));
		map.insert(std::pair<std::string, std::string>("200", "OK"));
		map.insert(std::pair<std::string, std::string>("201", "Created"));
		map.insert(std::pair<std::string, std::string>("202", "Accepted"));
		map.insert(std::pair<std::string, std::string>("203", "Non-Authoritative Information"));
		map.insert(std::pair<std::string, std::string>("204", "No Content"));
		map.insert(std::pair<std::string, std::string>("205", "Reset Content"));
		map.insert(std::pair<std::string, std::string>("206", "Partial Content"));
		map.insert(std::pair<std::string, std::string>("300", "Multiple Choices"));
		map.insert(std::pair<std::string, std::string>("301", "Moved Permanently"));
		map.insert(std::pair<std::string, std::string>("302", "Found"));
		map.insert(std::pair<std::string, std::string>("303", "See Other"));
		map.insert(std::pair<std::string, std::string>("304", "Not Modified"));
		map.insert(std::pair<std::string, std::string>("305", "Use Proxy"));
		map.insert(std::pair<std::string, std::string>("307", "Temporary Redirect"));
		map.insert(std::pair<std::string, std::string>("400", "Bad Request"));
		map.insert(std::pair<std::string, std::string>("401", "Unauthorized"));
		map.insert(std::pair<std::string, std::string>("402", "Payment Required"));
		map.insert(std::pair<std::string, std::string>("403", "Forbidden"));
		map.insert(std::pair<std::string, std::string>("404", "Not Found"));
		map.insert(std::pair<std::string, std::string>("405", "Method Not Allowed"));
		map.insert(std::pair<std::string, std::string>("406", "Not Acceptable"));
		map.insert(std::pair<std::string, std::string>("407", "Proxy Authentication Required"));
		map.insert(std::pair<std::string, std::string>("408", "Request Time-out"));
		map.insert(std::pair<std::string, std::string>("409", "Conflict"));
		map.insert(std::pair<std::string, std::string>("410", "Gone"));
		map.insert(std::pair<std::string, std::string>("411", "Length Required"));
		map.insert(std::pair<std::string, std::string>("412", "Precondition Failed"));
		map.insert(std::pair<std::string, std::string>("413", "Request Entity Too Large"));
		map.insert(std::pair<std::string, std::string>("414", "Request-URI Too Large"));
		map.insert(std::pair<std::string, std::string>("415", "Unsupported Media Type"));
		map.insert(std::pair<std::string, std::string>("416", "Requested range not satisfiable"));
		map.insert(std::pair<std::string, std::string>("417", "Expectation Failed"));
		map.insert(std::pair<std::string, std::string>("500", "Internal Server Error"));
		map.insert(std::pair<std::string, std::string>("501", "Not Implemented"));
		map.insert(std::pair<std::string, std::string>("502", "Bad Gateway"));
		map.insert(std::pair<std::string, std::string>("503", "Service Unavailable"));
		map.insert(std::pair<std::string, std::string>("504", "Gateway Time-out"));
		map.insert(std::pair<std::string, std::string>("505", "HTTP Version not supported"));
		return (map);
	}
	static std::map<std::string, std::string>	mime_types_constructor()
	{
		std::map<std::string, std::string>	map;

		map.insert(std::pair<std::string, std::string>("a2l", "application/A2L"));
		map.insert(std::pair<std::string, std::string>("aml", "application/AML"));
		map.insert(std::pair<std::string, std::string>("ez", "application/andrew-inset"));
		map.insert(std::pair<std::string, std::string>("atf", "application/ATF"));
		map.insert(std::pair<std::string, std::string>("atfx", "application/ATFX"));
		map.insert(std::pair<std::string, std::string>("atomcat", "application/atomcat+xml"));
		map.insert(std::pair<std::string, std::string>("atomdeleted", "application/atomdeleted+xml"));
		map.insert(std::pair<std::string, std::string>("atomsvc", "application/atomsvc+xml"));
		map.insert(std::pair<std::string, std::string>("atom", "application/atom+xml"));
		map.insert(std::pair<std::string, std::string>("dwd", "application/atsc-dwd+xml"));
		map.insert(std::pair<std::string, std::string>("held", "application/atsc-held+xml"));
		map.insert(std::pair<std::string, std::string>("rsat", "application/atsc-rsat+xml"));
		map.insert(std::pair<std::string, std::string>("atxml", "application/ATXML"));
		map.insert(std::pair<std::string, std::string>("apxml", "application/auth-policy+xml"));
		map.insert(std::pair<std::string, std::string>("xdd", "application/bacnet-xdd+zip"));
		map.insert(std::pair<std::string, std::string>("xcs", "application/calendar+xml"));
		map.insert(std::pair<std::string, std::string>("cbor", "application/cbor"));
		map.insert(std::pair<std::string, std::string>("c3ex", "application/cccex"));
		map.insert(std::pair<std::string, std::string>("ccmp", "application/ccmp+xml"));
		map.insert(std::pair<std::string, std::string>("ccxml", "application/ccxml+xml"));
		map.insert(std::pair<std::string, std::string>("cdfx", "application/CDFX+XML"));
		map.insert(std::pair<std::string, std::string>("cdmia", "application/cdmi-capability"));
		map.insert(std::pair<std::string, std::string>("cdmic", "application/cdmi-container"));
		map.insert(std::pair<std::string, std::string>("cdmid", "application/cdmi-domain"));
		map.insert(std::pair<std::string, std::string>("cdmio", "application/cdmi-object"));
		map.insert(std::pair<std::string, std::string>("cdmiq", "application/cdmi-queue"));
		map.insert(std::pair<std::string, std::string>("cea", "application/CEA"));
		map.insert(std::pair<std::string, std::string>("cellml", "application/cellml+xml"));
		map.insert(std::pair<std::string, std::string>("cml", "application/cellml+xml"));
		map.insert(std::pair<std::string, std::string>("1clr", "application/clr"));
		map.insert(std::pair<std::string, std::string>("clue", "application/clue_info+xml"));
		map.insert(std::pair<std::string, std::string>("cmsc", "application/cms"));
		map.insert(std::pair<std::string, std::string>("cpl", "application/cpl+xml"));
		map.insert(std::pair<std::string, std::string>("csrattrs", "application/csrattrs"));
		map.insert(std::pair<std::string, std::string>("mpdd", "application/dashdelta"));
		map.insert(std::pair<std::string, std::string>("mpd", "application/dash+xml"));
		map.insert(std::pair<std::string, std::string>("davmount", "application/davmount+xml"));
		map.insert(std::pair<std::string, std::string>("dcd", "application/DCD"));
		map.insert(std::pair<std::string, std::string>("dcm", "application/dicom"));
		map.insert(std::pair<std::string, std::string>("dii", "application/DII"));
		map.insert(std::pair<std::string, std::string>("dit", "application/DIT"));
		map.insert(std::pair<std::string, std::string>("xmls", "application/dskpp+xml"));
		map.insert(std::pair<std::string, std::string>("dssc", "application/dssc+der"));
		map.insert(std::pair<std::string, std::string>("xdssc", "application/dssc+xml"));
		map.insert(std::pair<std::string, std::string>("dvc", "application/dvcs"));
		map.insert(std::pair<std::string, std::string>("es", "application/ecmascript"));
		map.insert(std::pair<std::string, std::string>("efi", "application/efi"));
		map.insert(std::pair<std::string, std::string>("emma", "application/emma+xml"));
		map.insert(std::pair<std::string, std::string>("emotionml", "application/emotionml+xml"));
		map.insert(std::pair<std::string, std::string>("epub", "application/epub+zip"));
		map.insert(std::pair<std::string, std::string>("exi", "application/exi"));
		map.insert(std::pair<std::string, std::string>("finf", "application/fastinfoset"));
		map.insert(std::pair<std::string, std::string>("fdt", "application/fdt+xml"));
		map.insert(std::pair<std::string, std::string>("pfr", "application/font-tdpfr"));
		map.insert(std::pair<std::string, std::string>("geojson", "application/geo+json"));
		map.insert(std::pair<std::string, std::string>("gpkg", "application/geopackage+sqlite3"));
		map.insert(std::pair<std::string, std::string>("glbin", "application/gltf-buffer"));
		map.insert(std::pair<std::string, std::string>("glbuf", "application/gltf-buffer"));
		map.insert(std::pair<std::string, std::string>("gml", "application/gml+xml"));
		map.insert(std::pair<std::string, std::string>("gz", "application/gzip"));
		map.insert(std::pair<std::string, std::string>("tgz", "application/gzip"));
		map.insert(std::pair<std::string, std::string>("stk", "application/hyperstudio"));
		map.insert(std::pair<std::string, std::string>("ink", "application/inkml+xml"));
		map.insert(std::pair<std::string, std::string>("inkml", "application/inkml+xml"));
		map.insert(std::pair<std::string, std::string>("ipfix", "application/ipfix"));
		map.insert(std::pair<std::string, std::string>("its", "application/its+xml"));
		map.insert(std::pair<std::string, std::string>("js", "application/javascript"));
		map.insert(std::pair<std::string, std::string>("jrd", "application/jrd+json"));
		map.insert(std::pair<std::string, std::string>("json", "application/json"));
		map.insert(std::pair<std::string, std::string>("json-patch", "application/json-patch+json"));
		map.insert(std::pair<std::string, std::string>("jsonld", "application/ld+json"));
		map.insert(std::pair<std::string, std::string>("lgr", "application/lgr+xml"));
		map.insert(std::pair<std::string, std::string>("wlnk", "application/link-format"));
		map.insert(std::pair<std::string, std::string>("lostsyncxml", "application/lostsync+xml"));
		map.insert(std::pair<std::string, std::string>("lostxml", "application/lost+xml"));
		map.insert(std::pair<std::string, std::string>("lpf", "application/lpf+zip"));
		map.insert(std::pair<std::string, std::string>("lxf", "application/LXF"));
		map.insert(std::pair<std::string, std::string>("hqx", "application/mac-binhex40"));
		map.insert(std::pair<std::string, std::string>("cpt", "application/mac-compactpro"));
		map.insert(std::pair<std::string, std::string>("mads", "application/mads+xml"));
		map.insert(std::pair<std::string, std::string>("mrc", "application/marc"));
		map.insert(std::pair<std::string, std::string>("mrcx", "application/marcxml+xml"));
		map.insert(std::pair<std::string, std::string>("nb", "application/mathematica"));
		map.insert(std::pair<std::string, std::string>("ma", "application/mathematica"));
		map.insert(std::pair<std::string, std::string>("mb", "application/mathematica"));
		map.insert(std::pair<std::string, std::string>("mml", "application/mathml+xml"));
		map.insert(std::pair<std::string, std::string>("mbox", "application/mbox"));
		map.insert(std::pair<std::string, std::string>("meta4", "application/metalink4+xml"));
		map.insert(std::pair<std::string, std::string>("metalink", "application/metalink+xml"));
		map.insert(std::pair<std::string, std::string>("mets", "application/mets+xml"));
		map.insert(std::pair<std::string, std::string>("mf4", "application/MF4"));
		map.insert(std::pair<std::string, std::string>("h5", "application/mipc"));
		map.insert(std::pair<std::string, std::string>("maei", "application/mmt-aei+xml"));
		map.insert(std::pair<std::string, std::string>("musd", "application/mmt-usd+xml"));
		map.insert(std::pair<std::string, std::string>("mods", "application/mods+xml"));
		map.insert(std::pair<std::string, std::string>("m21", "application/mp21"));
		map.insert(std::pair<std::string, std::string>("mp21", "application/mp21"));
		map.insert(std::pair<std::string, std::string>("doc", "application/msword"));
		map.insert(std::pair<std::string, std::string>("mxf", "application/mxf"));
		map.insert(std::pair<std::string, std::string>("nq", "application/n-quads"));
		map.insert(std::pair<std::string, std::string>("nt", "application/n-triples"));
		map.insert(std::pair<std::string, std::string>("orq", "application/ocsp-request"));
		map.insert(std::pair<std::string, std::string>("ors", "application/ocsp-response"));
		map.insert(std::pair<std::string, std::string>("bin", "application/octet-stream"));
		map.insert(std::pair<std::string, std::string>("lha", "application/octet-stream"));
		map.insert(std::pair<std::string, std::string>("lzh", "application/octet-stream"));
		map.insert(std::pair<std::string, std::string>("exe", "application/octet-stream"));
		map.insert(std::pair<std::string, std::string>("class", "application/octet-stream"));
		map.insert(std::pair<std::string, std::string>("so", "application/octet-stream"));
		map.insert(std::pair<std::string, std::string>("dll", "application/octet-stream"));
		map.insert(std::pair<std::string, std::string>("img", "application/octet-stream"));
		map.insert(std::pair<std::string, std::string>("iso", "application/octet-stream"));
		map.insert(std::pair<std::string, std::string>("oda", "application/ODA"));
		map.insert(std::pair<std::string, std::string>("odx", "application/ODX"));
		map.insert(std::pair<std::string, std::string>("opf", "application/oebps-package+xml"));
		map.insert(std::pair<std::string, std::string>("ogx", "application/ogg"));
		map.insert(std::pair<std::string, std::string>("owx", "application/owl+xml"));
		map.insert(std::pair<std::string, std::string>("oxps", "application/oxps"));
		map.insert(std::pair<std::string, std::string>("relo", "application/p2p-overlay+xml"));
		map.insert(std::pair<std::string, std::string>("pdf", "application/pdf"));
		map.insert(std::pair<std::string, std::string>("pdx", "application/PDX"));
		map.insert(std::pair<std::string, std::string>("pem", "application/pem-certificate-chain"));
		map.insert(std::pair<std::string, std::string>("pgp", "application/pgp-encrypted"));
		map.insert(std::pair<std::string, std::string>("sig", "application/pgp-signature"));
		map.insert(std::pair<std::string, std::string>("p10", "application/pkcs10"));
		map.insert(std::pair<std::string, std::string>("p12", "application/pkcs12"));
		map.insert(std::pair<std::string, std::string>("pfx", "application/pkcs12"));
		map.insert(std::pair<std::string, std::string>("p7m", "application/pkcs7-mime"));
		map.insert(std::pair<std::string, std::string>("p7c", "application/pkcs7-mime"));
		map.insert(std::pair<std::string, std::string>("p7s", "application/pkcs7-signature"));
		map.insert(std::pair<std::string, std::string>("p8e", "application/pkcs8-encrypted"));
		map.insert(std::pair<std::string, std::string>("p8", "application/pkcs8"));
		map.insert(std::pair<std::string, std::string>("cer", "application/pkix-cert"));
		map.insert(std::pair<std::string, std::string>("pki", "application/pkixcmp"));
		map.insert(std::pair<std::string, std::string>("crl", "application/pkix-crl"));
		map.insert(std::pair<std::string, std::string>("pkipath", "application/pkix-pkipath"));
		map.insert(std::pair<std::string, std::string>("pls", "application/pls+xml"));
		map.insert(std::pair<std::string, std::string>("ps", "application/postscript"));
		map.insert(std::pair<std::string, std::string>("eps", "application/postscript"));
		map.insert(std::pair<std::string, std::string>("ai", "application/postscript"));
		map.insert(std::pair<std::string, std::string>("provx", "application/provenance+xml"));
		map.insert(std::pair<std::string, std::string>("cw", "application/prs.cww"));
		map.insert(std::pair<std::string, std::string>("cww", "application/prs.cww"));
		map.insert(std::pair<std::string, std::string>("hpub", "application/prs.hpub+zip"));
		map.insert(std::pair<std::string, std::string>("rnd", "application/prs.nprend"));
		map.insert(std::pair<std::string, std::string>("rct", "application/prs.nprend"));
		map.insert(std::pair<std::string, std::string>("rdf-crypt", "application/prs.rdf-xml-crypt"));
		map.insert(std::pair<std::string, std::string>("xsf", "application/prs.xsf+xml"));
		map.insert(std::pair<std::string, std::string>("pskcxml", "application/pskc+xml"));
		map.insert(std::pair<std::string, std::string>("rdf", "application/rdf+xml"));
		map.insert(std::pair<std::string, std::string>("rif", "application/reginfo+xml"));
		map.insert(std::pair<std::string, std::string>("rnc", "application/relax-ng-compact-syntax"));
		map.insert(std::pair<std::string, std::string>("rld", "application/resource-lists-diff+xml"));
		map.insert(std::pair<std::string, std::string>("rl", "application/resource-lists+xml"));
		map.insert(std::pair<std::string, std::string>("rfcxml", "application/rfc+xml"));
		map.insert(std::pair<std::string, std::string>("rs", "application/rls-services+xml"));
		map.insert(std::pair<std::string, std::string>("rapd", "application/route-apd+xml"));
		map.insert(std::pair<std::string, std::string>("sls", "application/route-s-tsid+xml"));
		map.insert(std::pair<std::string, std::string>("rusd", "application/route-usd+xml"));
		map.insert(std::pair<std::string, std::string>("gbr", "application/rpki-ghostbusters"));
		map.insert(std::pair<std::string, std::string>("mft", "application/rpki-manifest"));
		map.insert(std::pair<std::string, std::string>("roa", "application/rpki-roa"));
		map.insert(std::pair<std::string, std::string>("rss", "application/rss+xml"));
		map.insert(std::pair<std::string, std::string>("rtf", "application/rtf"));
		map.insert(std::pair<std::string, std::string>("sarif-external-properties", "application/sarif-external-properties+json"));
		map.insert(std::pair<std::string, std::string>("sarif-external-properties.json", "application/sarif-external-properties+json"));
		map.insert(std::pair<std::string, std::string>("sarif", "application/sarif+json"));
		map.insert(std::pair<std::string, std::string>("sarif.json", "application/sarif+json"));
		map.insert(std::pair<std::string, std::string>("scim", "application/scim+json"));
		map.insert(std::pair<std::string, std::string>("scq", "application/scvp-cv-request"));
		map.insert(std::pair<std::string, std::string>("scs", "application/scvp-cv-response"));
		map.insert(std::pair<std::string, std::string>("spq", "application/scvp-vp-request"));
		map.insert(std::pair<std::string, std::string>("spp", "application/scvp-vp-response"));
		map.insert(std::pair<std::string, std::string>("sdp", "application/sdp"));
		map.insert(std::pair<std::string, std::string>("senmlc", "application/senml+cbor"));
		map.insert(std::pair<std::string, std::string>("senml-etchc", "application/senml-etch+cbor"));
		map.insert(std::pair<std::string, std::string>("senml-etchj", "application/senml-etch+json"));
		map.insert(std::pair<std::string, std::string>("senmle", "application/senml-exi"));
		map.insert(std::pair<std::string, std::string>("senml", "application/senml+json"));
		map.insert(std::pair<std::string, std::string>("senmlx", "application/senml+xml"));
		map.insert(std::pair<std::string, std::string>("sensmlc", "application/sensml+cbor"));
		map.insert(std::pair<std::string, std::string>("sensmle", "application/sensml-exi"));
		map.insert(std::pair<std::string, std::string>("sensml", "application/sensml+json"));
		map.insert(std::pair<std::string, std::string>("sensmlx", "application/sensml+xml"));
		map.insert(std::pair<std::string, std::string>("soc", "application/sgml-open-catalog"));
		map.insert(std::pair<std::string, std::string>("shf", "application/shf+xml"));
		map.insert(std::pair<std::string, std::string>("siv", "application/sieve"));
		map.insert(std::pair<std::string, std::string>("sieve", "application/sieve"));
		map.insert(std::pair<std::string, std::string>("cl", "application/simple-filter+xml"));
		map.insert(std::pair<std::string, std::string>("smil", "application/smil+xml"));
		map.insert(std::pair<std::string, std::string>("smi", "application/smil+xml"));
		map.insert(std::pair<std::string, std::string>("sml", "application/smil+xml"));
		map.insert(std::pair<std::string, std::string>("rq", "application/sparql-query"));
		map.insert(std::pair<std::string, std::string>("srx", "application/sparql-results+xml"));
		map.insert(std::pair<std::string, std::string>("sql", "application/sql"));
		map.insert(std::pair<std::string, std::string>("gram", "application/srgs"));
		map.insert(std::pair<std::string, std::string>("grxml", "application/srgs+xml"));
		map.insert(std::pair<std::string, std::string>("sru", "application/sru+xml"));
		map.insert(std::pair<std::string, std::string>("ssml", "application/ssml+xml"));
		map.insert(std::pair<std::string, std::string>("stix", "application/stix+json"));
		map.insert(std::pair<std::string, std::string>("swidtag", "application/swid+xml"));
		map.insert(std::pair<std::string, std::string>("auc", "application/tamp-apex-update-confirm"));
		map.insert(std::pair<std::string, std::string>("tau", "application/tamp-apex-update"));
		map.insert(std::pair<std::string, std::string>("cuc", "application/tamp-community-update-confirm"));
		map.insert(std::pair<std::string, std::string>("tcu", "application/tamp-community-update"));
		map.insert(std::pair<std::string, std::string>("ter", "application/tamp-error"));
		map.insert(std::pair<std::string, std::string>("sac", "application/tamp-sequence-adjust-confirm"));
		map.insert(std::pair<std::string, std::string>("tsa", "application/tamp-sequence-adjust"));
		map.insert(std::pair<std::string, std::string>("tuc", "application/tamp-update-confirm"));
		map.insert(std::pair<std::string, std::string>("tur", "application/tamp-update"));
		map.insert(std::pair<std::string, std::string>("jsontd", "application/td+json"));
		map.insert(std::pair<std::string, std::string>("tei", "application/tei+xml"));
		map.insert(std::pair<std::string, std::string>("teiCorpus", "application/tei+xml"));
		map.insert(std::pair<std::string, std::string>("odd", "application/tei+xml"));
		map.insert(std::pair<std::string, std::string>("tfi", "application/thraud+xml"));
		map.insert(std::pair<std::string, std::string>("tsd", "application/timestamped-data"));
		map.insert(std::pair<std::string, std::string>("tsq", "application/timestamp-query"));
		map.insert(std::pair<std::string, std::string>("tsr", "application/timestamp-reply"));
		map.insert(std::pair<std::string, std::string>("trig", "application/trig"));
		map.insert(std::pair<std::string, std::string>("ttml", "application/ttml+xml"));
		map.insert(std::pair<std::string, std::string>("gsheet", "application/urc-grpsheet+xml"));
		map.insert(std::pair<std::string, std::string>("rsheet", "application/urc-ressheet+xml"));
		map.insert(std::pair<std::string, std::string>("td", "application/urc-targetdesc+xml"));
		map.insert(std::pair<std::string, std::string>("uis", "application/urc-uisocketdesc+xml"));
		map.insert(std::pair<std::string, std::string>("1km", "application/vnd.1000minds.decision-model+xml"));
		map.insert(std::pair<std::string, std::string>("sms", "application/vnd.3gpp2.sms"));
		map.insert(std::pair<std::string, std::string>("tcap", "application/vnd.3gpp2.tcap"));
		map.insert(std::pair<std::string, std::string>("plb", "application/vnd.3gpp.pic-bw-large"));
		map.insert(std::pair<std::string, std::string>("psb", "application/vnd.3gpp.pic-bw-small"));
		map.insert(std::pair<std::string, std::string>("pvb", "application/vnd.3gpp.pic-bw-var"));
		map.insert(std::pair<std::string, std::string>("imgcal", "application/vnd.3lightssoftware.imagescal"));
		map.insert(std::pair<std::string, std::string>("pwn", "application/vnd.3M.Post-it-Notes"));
		map.insert(std::pair<std::string, std::string>("aso", "application/vnd.accpac.simply.aso"));
		map.insert(std::pair<std::string, std::string>("imp", "application/vnd.accpac.simply.imp"));
		map.insert(std::pair<std::string, std::string>("acu", "application/vnd.acucobol"));
		map.insert(std::pair<std::string, std::string>("atc", "application/vnd.acucorp"));
		map.insert(std::pair<std::string, std::string>("acutc", "application/vnd.acucorp"));
		map.insert(std::pair<std::string, std::string>("swf", "application/vnd.adobe.flash.movie"));
		map.insert(std::pair<std::string, std::string>("fcdt", "application/vnd.adobe.formscentral.fcdt"));
		map.insert(std::pair<std::string, std::string>("fxp", "application/vnd.adobe.fxp"));
		map.insert(std::pair<std::string, std::string>("fxpl", "application/vnd.adobe.fxp"));
		map.insert(std::pair<std::string, std::string>("xdp", "application/vnd.adobe.xdp+xml"));
		map.insert(std::pair<std::string, std::string>("xfdf", "application/vnd.adobe.xfdf"));
		map.insert(std::pair<std::string, std::string>("list3820", "application/vnd.afpc.modca"));
		map.insert(std::pair<std::string, std::string>("listafp", "application/vnd.afpc.modca"));
		map.insert(std::pair<std::string, std::string>("afp", "application/vnd.afpc.modca"));
		map.insert(std::pair<std::string, std::string>("pseg3820", "application/vnd.afpc.modca"));
		map.insert(std::pair<std::string, std::string>("ovl", "application/vnd.afpc.modca-overlay"));
		map.insert(std::pair<std::string, std::string>("psg", "application/vnd.afpc.modca-pagesegment"));
		map.insert(std::pair<std::string, std::string>("ahead", "application/vnd.ahead.space"));
		map.insert(std::pair<std::string, std::string>("azf", "application/vnd.airzip.filesecure.azf"));
		map.insert(std::pair<std::string, std::string>("azs", "application/vnd.airzip.filesecure.azs"));
		map.insert(std::pair<std::string, std::string>("azw3", "application/vnd.amazon.mobi8-ebook"));
		map.insert(std::pair<std::string, std::string>("acc", "application/vnd.americandynamics.acc"));
		map.insert(std::pair<std::string, std::string>("ami", "application/vnd.amiga.ami"));
		map.insert(std::pair<std::string, std::string>("ota", "application/vnd.android.ota"));
		map.insert(std::pair<std::string, std::string>("apk", "application/vnd.android.package-archive"));
		map.insert(std::pair<std::string, std::string>("apkg", "application/vnd.anki"));
		map.insert(std::pair<std::string, std::string>("cii", "application/vnd.anser-web-certificate-issue-initiation"));
		map.insert(std::pair<std::string, std::string>("fti", "application/vnd.anser-web-funds-transfer-initiation"));
		map.insert(std::pair<std::string, std::string>("dist", "application/vnd.apple.installer+xml"));
		map.insert(std::pair<std::string, std::string>("distz", "application/vnd.apple.installer+xml"));
		map.insert(std::pair<std::string, std::string>("pkg", "application/vnd.apple.installer+xml"));
		map.insert(std::pair<std::string, std::string>("mpkg", "application/vnd.apple.installer+xml"));
		map.insert(std::pair<std::string, std::string>("keynote", "application/vnd.apple.keynote"));
		map.insert(std::pair<std::string, std::string>("m3u8", "application/vnd.apple.mpegurl"));
		map.insert(std::pair<std::string, std::string>("numbers", "application/vnd.apple.numbers"));
		map.insert(std::pair<std::string, std::string>("pages", "application/vnd.apple.pages"));
		map.insert(std::pair<std::string, std::string>("swi", "application/vnd.aristanetworks.swi"));
		map.insert(std::pair<std::string, std::string>("artisan", "application/vnd.artisan+json"));
		map.insert(std::pair<std::string, std::string>("iota", "application/vnd.astraea-software.iota"));
		map.insert(std::pair<std::string, std::string>("aep", "application/vnd.audiograph"));
		map.insert(std::pair<std::string, std::string>("package", "application/vnd.autopackage"));
		map.insert(std::pair<std::string, std::string>("bmml", "application/vnd.balsamiq.bmml+xml"));
		map.insert(std::pair<std::string, std::string>("bmpr", "application/vnd.balsamiq.bmpr"));
		map.insert(std::pair<std::string, std::string>("ac2", "application/vnd.banana-accounting"));
		map.insert(std::pair<std::string, std::string>("mpm", "application/vnd.blueice.multipass"));
		map.insert(std::pair<std::string, std::string>("ep", "application/vnd.bluetooth.ep.oob"));
		map.insert(std::pair<std::string, std::string>("le", "application/vnd.bluetooth.le.oob"));
		map.insert(std::pair<std::string, std::string>("bmi", "application/vnd.bmi"));
		map.insert(std::pair<std::string, std::string>("rep", "application/vnd.businessobjects"));
		map.insert(std::pair<std::string, std::string>("tlclient", "application/vnd.cendio.thinlinc.clientconf"));
		map.insert(std::pair<std::string, std::string>("cdxml", "application/vnd.chemdraw+xml"));
		map.insert(std::pair<std::string, std::string>("pgn", "application/vnd.chess-pgn"));
		map.insert(std::pair<std::string, std::string>("mmd", "application/vnd.chipnuts.karaoke-mmd"));
		map.insert(std::pair<std::string, std::string>("cdy", "application/vnd.cinderella"));
		map.insert(std::pair<std::string, std::string>("csl", "application/vnd.citationstyles.style+xml"));
		map.insert(std::pair<std::string, std::string>("cla", "application/vnd.claymore"));
		map.insert(std::pair<std::string, std::string>("rp9", "application/vnd.cloanto.rp9"));
		map.insert(std::pair<std::string, std::string>("c4g", "application/vnd.clonk.c4group"));
		map.insert(std::pair<std::string, std::string>("c4d", "application/vnd.clonk.c4group"));
		map.insert(std::pair<std::string, std::string>("c4f", "application/vnd.clonk.c4group"));
		map.insert(std::pair<std::string, std::string>("c4p", "application/vnd.clonk.c4group"));
		map.insert(std::pair<std::string, std::string>("c4u", "application/vnd.clonk.c4group"));
		map.insert(std::pair<std::string, std::string>("c11amc", "application/vnd.cluetrust.cartomobile-config"));
		map.insert(std::pair<std::string, std::string>("c11amz", "application/vnd.cluetrust.cartomobile-config-pkg"));
		map.insert(std::pair<std::string, std::string>("coffee", "application/vnd.coffeescript"));
		map.insert(std::pair<std::string, std::string>("xott", "application/vnd.collabio.xodocuments.document-template"));
		map.insert(std::pair<std::string, std::string>("xodt", "application/vnd.collabio.xodocuments.document"));
		map.insert(std::pair<std::string, std::string>("xotp", "application/vnd.collabio.xodocuments.presentation-template"));
		map.insert(std::pair<std::string, std::string>("xodp", "application/vnd.collabio.xodocuments.presentation"));
		map.insert(std::pair<std::string, std::string>("xots", "application/vnd.collabio.xodocuments.spreadsheet-template"));
		map.insert(std::pair<std::string, std::string>("xods", "application/vnd.collabio.xodocuments.spreadsheet"));
		map.insert(std::pair<std::string, std::string>("cbr", "application/vnd.comicbook-rar"));
		map.insert(std::pair<std::string, std::string>("cbz", "application/vnd.comicbook+zip"));
		map.insert(std::pair<std::string, std::string>("ica", "application/vnd.commerce-battelle"));
		map.insert(std::pair<std::string, std::string>("icf", "application/vnd.commerce-battelle"));
		map.insert(std::pair<std::string, std::string>("icd", "application/vnd.commerce-battelle"));
		map.insert(std::pair<std::string, std::string>("ic0", "application/vnd.commerce-battelle"));
		map.insert(std::pair<std::string, std::string>("ic1", "application/vnd.commerce-battelle"));
		map.insert(std::pair<std::string, std::string>("ic2", "application/vnd.commerce-battelle"));
		map.insert(std::pair<std::string, std::string>("ic3", "application/vnd.commerce-battelle"));
		map.insert(std::pair<std::string, std::string>("ic4", "application/vnd.commerce-battelle"));
		map.insert(std::pair<std::string, std::string>("ic5", "application/vnd.commerce-battelle"));
		map.insert(std::pair<std::string, std::string>("ic6", "application/vnd.commerce-battelle"));
		map.insert(std::pair<std::string, std::string>("ic7", "application/vnd.commerce-battelle"));
		map.insert(std::pair<std::string, std::string>("ic8", "application/vnd.commerce-battelle"));
		map.insert(std::pair<std::string, std::string>("csp", "application/vnd.commonspace"));
		map.insert(std::pair<std::string, std::string>("cst", "application/vnd.commonspace"));
		map.insert(std::pair<std::string, std::string>("cdbcmsg", "application/vnd.contact.cmsg"));
		map.insert(std::pair<std::string, std::string>("ign", "application/vnd.coreos.ignition+json"));
		map.insert(std::pair<std::string, std::string>("ignition", "application/vnd.coreos.ignition+json"));
		map.insert(std::pair<std::string, std::string>("cmc", "application/vnd.cosmocaller"));
		map.insert(std::pair<std::string, std::string>("clkx", "application/vnd.crick.clicker"));
		map.insert(std::pair<std::string, std::string>("clkk", "application/vnd.crick.clicker.keyboard"));
		map.insert(std::pair<std::string, std::string>("clkp", "application/vnd.crick.clicker.palette"));
		map.insert(std::pair<std::string, std::string>("clkt", "application/vnd.crick.clicker.template"));
		map.insert(std::pair<std::string, std::string>("clkw", "application/vnd.crick.clicker.wordbank"));
		map.insert(std::pair<std::string, std::string>("wbs", "application/vnd.criticaltools.wbs+xml"));
		map.insert(std::pair<std::string, std::string>("c9r", "application/vnd.cryptomator.encrypted"));
		map.insert(std::pair<std::string, std::string>("c9s", "application/vnd.cryptomator.encrypted"));
		map.insert(std::pair<std::string, std::string>("cryptomator", "application/vnd.cryptomator.vault"));
		map.insert(std::pair<std::string, std::string>("ssvc", "application/vnd.crypto-shade-file"));
		map.insert(std::pair<std::string, std::string>("pml", "application/vnd.ctc-posml"));
		map.insert(std::pair<std::string, std::string>("ppd", "application/vnd.cups-ppd"));
		map.insert(std::pair<std::string, std::string>("curl", "application/vnd.curl"));
		map.insert(std::pair<std::string, std::string>("dart", "application/vnd.dart"));
		map.insert(std::pair<std::string, std::string>("rdz", "application/vnd.data-vision.rdz"));
		map.insert(std::pair<std::string, std::string>("dbf", "application/vnd.dbf"));
		map.insert(std::pair<std::string, std::string>("deb", "application/vnd.debian.binary-package"));
		map.insert(std::pair<std::string, std::string>("udeb", "application/vnd.debian.binary-package"));
		map.insert(std::pair<std::string, std::string>("uvf", "application/vnd.dece.data"));
		map.insert(std::pair<std::string, std::string>("uvvf", "application/vnd.dece.data"));
		map.insert(std::pair<std::string, std::string>("uvd", "application/vnd.dece.data"));
		map.insert(std::pair<std::string, std::string>("uvvd", "application/vnd.dece.data"));
		map.insert(std::pair<std::string, std::string>("uvt", "application/vnd.dece.ttml+xml"));
		map.insert(std::pair<std::string, std::string>("uvvt", "application/vnd.dece.ttml+xml"));
		map.insert(std::pair<std::string, std::string>("uvx", "application/vnd.dece.unspecified"));
		map.insert(std::pair<std::string, std::string>("uvvx", "application/vnd.dece.unspecified"));
		map.insert(std::pair<std::string, std::string>("uvz", "application/vnd.dece.zip"));
		map.insert(std::pair<std::string, std::string>("uvvz", "application/vnd.dece.zip"));
		map.insert(std::pair<std::string, std::string>("fe_launch", "application/vnd.denovo.fcselayout-link"));
		map.insert(std::pair<std::string, std::string>("dsm", "application/vnd.desmume.movie"));
		map.insert(std::pair<std::string, std::string>("dna", "application/vnd.dna"));
		map.insert(std::pair<std::string, std::string>("docjson", "application/vnd.document+json"));
		map.insert(std::pair<std::string, std::string>("scld", "application/vnd.doremir.scorecloud-binary-document"));
		map.insert(std::pair<std::string, std::string>("dpg", "application/vnd.dpgraph"));
		map.insert(std::pair<std::string, std::string>("mwc", "application/vnd.dpgraph"));
		map.insert(std::pair<std::string, std::string>("dpgraph", "application/vnd.dpgraph"));
		map.insert(std::pair<std::string, std::string>("dfac", "application/vnd.dreamfactory"));
		map.insert(std::pair<std::string, std::string>("fla", "application/vnd.dtg.local.flash"));
		map.insert(std::pair<std::string, std::string>("ait", "application/vnd.dvb.ait"));
		map.insert(std::pair<std::string, std::string>("svc", "application/vnd.dvb.service"));
		map.insert(std::pair<std::string, std::string>("geo", "application/vnd.dynageo"));
		map.insert(std::pair<std::string, std::string>("dzr", "application/vnd.dzr"));
		map.insert(std::pair<std::string, std::string>("mag", "application/vnd.ecowin.chart"));
		map.insert(std::pair<std::string, std::string>("nml", "application/vnd.enliven"));
		map.insert(std::pair<std::string, std::string>("esf", "application/vnd.epson.esf"));
		map.insert(std::pair<std::string, std::string>("msf", "application/vnd.epson.msf"));
		map.insert(std::pair<std::string, std::string>("qam", "application/vnd.epson.quickanime"));
		map.insert(std::pair<std::string, std::string>("slt", "application/vnd.epson.salt"));
		map.insert(std::pair<std::string, std::string>("ssf", "application/vnd.epson.ssf"));
		map.insert(std::pair<std::string, std::string>("qcall", "application/vnd.ericsson.quickcall"));
		map.insert(std::pair<std::string, std::string>("qca", "application/vnd.ericsson.quickcall"));
		map.insert(std::pair<std::string, std::string>("espass", "application/vnd.espass-espass+zip"));
		map.insert(std::pair<std::string, std::string>("es3", "application/vnd.eszigno3+xml"));
		map.insert(std::pair<std::string, std::string>("et3", "application/vnd.eszigno3+xml"));
		map.insert(std::pair<std::string, std::string>("asice", "application/vnd.etsi.asic-e+zip"));
		map.insert(std::pair<std::string, std::string>("sce", "application/vnd.etsi.asic-e+zip"));
		map.insert(std::pair<std::string, std::string>("asics", "application/vnd.etsi.asic-s+zip"));
		map.insert(std::pair<std::string, std::string>("tst", "application/vnd.etsi.timestamp-token"));
		map.insert(std::pair<std::string, std::string>("ecigprofile", "application/vnd.evolv.ecig.profile"));
		map.insert(std::pair<std::string, std::string>("ecig", "application/vnd.evolv.ecig.settings"));
		map.insert(std::pair<std::string, std::string>("ecigtheme", "application/vnd.evolv.ecig.theme"));
		map.insert(std::pair<std::string, std::string>("mpw", "application/vnd.exstream-empower+zip"));
		map.insert(std::pair<std::string, std::string>("pub", "application/vnd.exstream-package"));
		map.insert(std::pair<std::string, std::string>("ez2", "application/vnd.ezpix-album"));
		map.insert(std::pair<std::string, std::string>("ez3", "application/vnd.ezpix-package"));
		map.insert(std::pair<std::string, std::string>("dim", "application/vnd.fastcopy-disk-image"));
		map.insert(std::pair<std::string, std::string>("fdf", "application/vnd.fdf"));
		map.insert(std::pair<std::string, std::string>("msd", "application/vnd.fdsn.mseed"));
		map.insert(std::pair<std::string, std::string>("mseed", "application/vnd.fdsn.mseed"));
		map.insert(std::pair<std::string, std::string>("seed", "application/vnd.fdsn.seed"));
		map.insert(std::pair<std::string, std::string>("dataless", "application/vnd.fdsn.seed"));
		map.insert(std::pair<std::string, std::string>("flb", "application/vnd.ficlab.flb+zip"));
		map.insert(std::pair<std::string, std::string>("zfc", "application/vnd.filmit.zfc"));
		map.insert(std::pair<std::string, std::string>("gph", "application/vnd.FloGraphIt"));
		map.insert(std::pair<std::string, std::string>("ftc", "application/vnd.fluxtime.clip"));
		map.insert(std::pair<std::string, std::string>("sfd", "application/vnd.font-fontforge-sfd"));
		map.insert(std::pair<std::string, std::string>("fm", "application/vnd.framemaker"));
		map.insert(std::pair<std::string, std::string>("fnc", "application/vnd.frogans.fnc"));
		map.insert(std::pair<std::string, std::string>("ltf", "application/vnd.frogans.ltf"));
		map.insert(std::pair<std::string, std::string>("fsc", "application/vnd.fsc.weblaunch"));
		map.insert(std::pair<std::string, std::string>("oa2", "application/vnd.fujitsu.oasys2"));
		map.insert(std::pair<std::string, std::string>("oa3", "application/vnd.fujitsu.oasys3"));
		map.insert(std::pair<std::string, std::string>("fg5", "application/vnd.fujitsu.oasysgp"));
		map.insert(std::pair<std::string, std::string>("oas", "application/vnd.fujitsu.oasys"));
		map.insert(std::pair<std::string, std::string>("bh2", "application/vnd.fujitsu.oasysprs"));
		map.insert(std::pair<std::string, std::string>("ddd", "application/vnd.fujixerox.ddd"));
		map.insert(std::pair<std::string, std::string>("xbd", "application/vnd.fujixerox.docuworks.binder"));
		map.insert(std::pair<std::string, std::string>("xct", "application/vnd.fujixerox.docuworks.container"));
		map.insert(std::pair<std::string, std::string>("xdw", "application/vnd.fujixerox.docuworks"));
		map.insert(std::pair<std::string, std::string>("fzs", "application/vnd.fuzzysheet"));
		map.insert(std::pair<std::string, std::string>("txd", "application/vnd.genomatix.tuxedo"));
		map.insert(std::pair<std::string, std::string>("g3", "application/vnd.geocube+xml"));
		map.insert(std::pair<std::string, std::string>("g³", "application/vnd.geocube+xml"));
		map.insert(std::pair<std::string, std::string>("ggb", "application/vnd.geogebra.file"));
		map.insert(std::pair<std::string, std::string>("ggs", "application/vnd.geogebra.slides"));
		map.insert(std::pair<std::string, std::string>("ggt", "application/vnd.geogebra.tool"));
		map.insert(std::pair<std::string, std::string>("gex", "application/vnd.geometry-explorer"));
		map.insert(std::pair<std::string, std::string>("gre", "application/vnd.geometry-explorer"));
		map.insert(std::pair<std::string, std::string>("gxt", "application/vnd.geonext"));
		map.insert(std::pair<std::string, std::string>("g2w", "application/vnd.geoplan"));
		map.insert(std::pair<std::string, std::string>("g3w", "application/vnd.geospace"));
		map.insert(std::pair<std::string, std::string>("gmx", "application/vnd.gmx"));
		map.insert(std::pair<std::string, std::string>("kml", "application/vnd.google-earth.kml+xml"));
		map.insert(std::pair<std::string, std::string>("kmz", "application/vnd.google-earth.kmz"));
		map.insert(std::pair<std::string, std::string>("gqf", "application/vnd.grafeq"));
		map.insert(std::pair<std::string, std::string>("gqs", "application/vnd.grafeq"));
		map.insert(std::pair<std::string, std::string>("gac", "application/vnd.groove-account"));
		map.insert(std::pair<std::string, std::string>("ghf", "application/vnd.groove-help"));
		map.insert(std::pair<std::string, std::string>("gim", "application/vnd.groove-identity-message"));
		map.insert(std::pair<std::string, std::string>("grv", "application/vnd.groove-injector"));
		map.insert(std::pair<std::string, std::string>("gtm", "application/vnd.groove-tool-message"));
		map.insert(std::pair<std::string, std::string>("tpl", "application/vnd.groove-tool-template"));
		map.insert(std::pair<std::string, std::string>("vcg", "application/vnd.groove-vcard"));
		map.insert(std::pair<std::string, std::string>("hal", "application/vnd.hal+xml"));
		map.insert(std::pair<std::string, std::string>("zmm", "application/vnd.HandHeld-Entertainment+xml"));
		map.insert(std::pair<std::string, std::string>("hbci", "application/vnd.hbci"));
		map.insert(std::pair<std::string, std::string>("hbc", "application/vnd.hbci"));
		map.insert(std::pair<std::string, std::string>("kom", "application/vnd.hbci"));
		map.insert(std::pair<std::string, std::string>("upa", "application/vnd.hbci"));
		map.insert(std::pair<std::string, std::string>("pkd", "application/vnd.hbci"));
		map.insert(std::pair<std::string, std::string>("bpd", "application/vnd.hbci"));
		map.insert(std::pair<std::string, std::string>("hdt", "application/vnd.hdt"));
		map.insert(std::pair<std::string, std::string>("les", "application/vnd.hhe.lesson-player"));
		map.insert(std::pair<std::string, std::string>("hpgl", "application/vnd.hp-HPGL"));
		map.insert(std::pair<std::string, std::string>("hpi", "application/vnd.hp-hpid"));
		map.insert(std::pair<std::string, std::string>("hpid", "application/vnd.hp-hpid"));
		map.insert(std::pair<std::string, std::string>("hps", "application/vnd.hp-hps"));
		map.insert(std::pair<std::string, std::string>("jlt", "application/vnd.hp-jlyt"));
		map.insert(std::pair<std::string, std::string>("pcl", "application/vnd.hp-PCL"));
		map.insert(std::pair<std::string, std::string>("sfd-hdstx", "application/vnd.hydrostatix.sof-data"));
		map.insert(std::pair<std::string, std::string>("x3d", "application/vnd.hzn-3d-crossword"));
		map.insert(std::pair<std::string, std::string>("emm", "application/vnd.ibm.electronic-media"));
		map.insert(std::pair<std::string, std::string>("mpy", "application/vnd.ibm.MiniPay"));
		map.insert(std::pair<std::string, std::string>("irm", "application/vnd.ibm.rights-management"));
		map.insert(std::pair<std::string, std::string>("sc", "application/vnd.ibm.secure-container"));
		map.insert(std::pair<std::string, std::string>("icc", "application/vnd.iccprofile"));
		map.insert(std::pair<std::string, std::string>("icm", "application/vnd.iccprofile"));
		map.insert(std::pair<std::string, std::string>("1905.1", "application/vnd.ieee.1905"));
		map.insert(std::pair<std::string, std::string>("igl", "application/vnd.igloader"));
		map.insert(std::pair<std::string, std::string>("imf", "application/vnd.imagemeter.folder+zip"));
		map.insert(std::pair<std::string, std::string>("imi", "application/vnd.imagemeter.image+zip"));
		map.insert(std::pair<std::string, std::string>("ivp", "application/vnd.immervision-ivp"));
		map.insert(std::pair<std::string, std::string>("ivu", "application/vnd.immervision-ivu"));
		map.insert(std::pair<std::string, std::string>("imscc", "application/vnd.ims.imsccv1p1"));
		map.insert(std::pair<std::string, std::string>("igm", "application/vnd.insors.igm"));
		map.insert(std::pair<std::string, std::string>("xpw", "application/vnd.intercon.formnet"));
		map.insert(std::pair<std::string, std::string>("xpx", "application/vnd.intercon.formnet"));
		map.insert(std::pair<std::string, std::string>("i2g", "application/vnd.intergeo"));
		map.insert(std::pair<std::string, std::string>("qbo", "application/vnd.intu.qbo"));
		map.insert(std::pair<std::string, std::string>("qfx", "application/vnd.intu.qfx"));
		map.insert(std::pair<std::string, std::string>("rcprofile", "application/vnd.ipunplugged.rcprofile"));
		map.insert(std::pair<std::string, std::string>("irp", "application/vnd.irepository.package+xml"));
		map.insert(std::pair<std::string, std::string>("fcs", "application/vnd.isac.fcs"));
		map.insert(std::pair<std::string, std::string>("xpr", "application/vnd.is-xpr"));
		map.insert(std::pair<std::string, std::string>("jam", "application/vnd.jam"));
		map.insert(std::pair<std::string, std::string>("rms", "application/vnd.jcp.javame.midlet-rms"));
		map.insert(std::pair<std::string, std::string>("jisp", "application/vnd.jisp"));
		map.insert(std::pair<std::string, std::string>("joda", "application/vnd.joost.joda-archive"));
		map.insert(std::pair<std::string, std::string>("ktz", "application/vnd.kahootz"));
		map.insert(std::pair<std::string, std::string>("ktr", "application/vnd.kahootz"));
		map.insert(std::pair<std::string, std::string>("karbon", "application/vnd.kde.karbon"));
		map.insert(std::pair<std::string, std::string>("chrt", "application/vnd.kde.kchart"));
		map.insert(std::pair<std::string, std::string>("kfo", "application/vnd.kde.kformula"));
		map.insert(std::pair<std::string, std::string>("flw", "application/vnd.kde.kivio"));
		map.insert(std::pair<std::string, std::string>("kon", "application/vnd.kde.kontour"));
		map.insert(std::pair<std::string, std::string>("kpr", "application/vnd.kde.kpresenter"));
		map.insert(std::pair<std::string, std::string>("kpt", "application/vnd.kde.kpresenter"));
		map.insert(std::pair<std::string, std::string>("ksp", "application/vnd.kde.kspread"));
		map.insert(std::pair<std::string, std::string>("kwd", "application/vnd.kde.kword"));
		map.insert(std::pair<std::string, std::string>("kwt", "application/vnd.kde.kword"));
		map.insert(std::pair<std::string, std::string>("htke", "application/vnd.kenameaapp"));
		map.insert(std::pair<std::string, std::string>("kia", "application/vnd.kidspiration"));
		map.insert(std::pair<std::string, std::string>("kne", "application/vnd.Kinar"));
		map.insert(std::pair<std::string, std::string>("knp", "application/vnd.Kinar"));
		map.insert(std::pair<std::string, std::string>("sdf", "application/vnd.Kinar"));
		map.insert(std::pair<std::string, std::string>("skp", "application/vnd.koan"));
		map.insert(std::pair<std::string, std::string>("skd", "application/vnd.koan"));
		map.insert(std::pair<std::string, std::string>("skm", "application/vnd.koan"));
		map.insert(std::pair<std::string, std::string>("skt", "application/vnd.koan"));
		map.insert(std::pair<std::string, std::string>("sse", "application/vnd.kodak-descriptor"));
		map.insert(std::pair<std::string, std::string>("las", "application/vnd.las"));
		map.insert(std::pair<std::string, std::string>("lasjson", "application/vnd.las.las+json"));
		map.insert(std::pair<std::string, std::string>("lasxml", "application/vnd.las.las+xml"));
		map.insert(std::pair<std::string, std::string>("lbd", "application/vnd.llamagraphics.life-balance.desktop"));
		map.insert(std::pair<std::string, std::string>("lbe", "application/vnd.llamagraphics.life-balance.exchange+xml"));
		map.insert(std::pair<std::string, std::string>("lcs", "application/vnd.logipipe.circuit+zip"));
		map.insert(std::pair<std::string, std::string>("lca", "application/vnd.logipipe.circuit+zip"));
		map.insert(std::pair<std::string, std::string>("loom", "application/vnd.loom"));
		map.insert(std::pair<std::string, std::string>("123", "application/vnd.lotus-1-2-3"));
		map.insert(std::pair<std::string, std::string>("wk4", "application/vnd.lotus-1-2-3"));
		map.insert(std::pair<std::string, std::string>("wk3", "application/vnd.lotus-1-2-3"));
		map.insert(std::pair<std::string, std::string>("wk1", "application/vnd.lotus-1-2-3"));
		map.insert(std::pair<std::string, std::string>("apr", "application/vnd.lotus-approach"));
		map.insert(std::pair<std::string, std::string>("vew", "application/vnd.lotus-approach"));
		map.insert(std::pair<std::string, std::string>("prz", "application/vnd.lotus-freelance"));
		map.insert(std::pair<std::string, std::string>("pre", "application/vnd.lotus-freelance"));
		map.insert(std::pair<std::string, std::string>("nsf", "application/vnd.lotus-notes"));
		map.insert(std::pair<std::string, std::string>("ntf", "application/vnd.lotus-notes"));
		map.insert(std::pair<std::string, std::string>("ndl", "application/vnd.lotus-notes"));
		map.insert(std::pair<std::string, std::string>("ns4", "application/vnd.lotus-notes"));
		map.insert(std::pair<std::string, std::string>("ns3", "application/vnd.lotus-notes"));
		map.insert(std::pair<std::string, std::string>("ns2", "application/vnd.lotus-notes"));
		map.insert(std::pair<std::string, std::string>("nsh", "application/vnd.lotus-notes"));
		map.insert(std::pair<std::string, std::string>("nsg", "application/vnd.lotus-notes"));
		map.insert(std::pair<std::string, std::string>("or3", "application/vnd.lotus-organizer"));
		map.insert(std::pair<std::string, std::string>("or2", "application/vnd.lotus-organizer"));
		map.insert(std::pair<std::string, std::string>("org", "application/vnd.lotus-organizer"));
		map.insert(std::pair<std::string, std::string>("scm", "application/vnd.lotus-screencam"));
		map.insert(std::pair<std::string, std::string>("lwp", "application/vnd.lotus-wordpro"));
		map.insert(std::pair<std::string, std::string>("sam", "application/vnd.lotus-wordpro"));
		map.insert(std::pair<std::string, std::string>("portpkg", "application/vnd.macports.portpkg"));
		map.insert(std::pair<std::string, std::string>("mvt", "application/vnd.mapbox-vector-tile"));
		map.insert(std::pair<std::string, std::string>("mdc", "application/vnd.marlin.drm.mdcf"));
		map.insert(std::pair<std::string, std::string>("mmdb", "application/vnd.maxmind.maxmind-db"));
		map.insert(std::pair<std::string, std::string>("mcd", "application/vnd.mcd"));
		map.insert(std::pair<std::string, std::string>("mc1", "application/vnd.medcalcdata"));
		map.insert(std::pair<std::string, std::string>("cdkey", "application/vnd.mediastation.cdkey"));
		map.insert(std::pair<std::string, std::string>("mwf", "application/vnd.MFER"));
		map.insert(std::pair<std::string, std::string>("mfm", "application/vnd.mfmp"));
		map.insert(std::pair<std::string, std::string>("flo", "application/vnd.micrografx.flo"));
		map.insert(std::pair<std::string, std::string>("igx", "application/vnd.micrografx.igx"));
		map.insert(std::pair<std::string, std::string>("mif", "application/vnd.mif"));
		map.insert(std::pair<std::string, std::string>("daf", "application/vnd.Mobius.DAF"));
		map.insert(std::pair<std::string, std::string>("dis", "application/vnd.Mobius.DIS"));
		map.insert(std::pair<std::string, std::string>("mbk", "application/vnd.Mobius.MBK"));
		map.insert(std::pair<std::string, std::string>("mqy", "application/vnd.Mobius.MQY"));
		map.insert(std::pair<std::string, std::string>("msl", "application/vnd.Mobius.MSL"));
		map.insert(std::pair<std::string, std::string>("plc", "application/vnd.Mobius.PLC"));
		map.insert(std::pair<std::string, std::string>("txf", "application/vnd.Mobius.TXF"));
		map.insert(std::pair<std::string, std::string>("mpn", "application/vnd.mophun.application"));
		map.insert(std::pair<std::string, std::string>("mpc", "application/vnd.mophun.certificate"));
		map.insert(std::pair<std::string, std::string>("xul", "application/vnd.mozilla.xul+xml"));
		map.insert(std::pair<std::string, std::string>("3mf", "application/vnd.ms-3mfdocument"));
		map.insert(std::pair<std::string, std::string>("msa", "application/vnd.msa-disk-image"));
		map.insert(std::pair<std::string, std::string>("cil", "application/vnd.ms-artgalry"));
		map.insert(std::pair<std::string, std::string>("asf", "application/vnd.ms-asf"));
		map.insert(std::pair<std::string, std::string>("cab", "application/vnd.ms-cab-compressed"));
		map.insert(std::pair<std::string, std::string>("mseq", "application/vnd.mseq"));
		map.insert(std::pair<std::string, std::string>("xlam", "application/vnd.ms-excel.addin.macroEnabled.12"));
		map.insert(std::pair<std::string, std::string>("xlsb", "application/vnd.ms-excel.sheet.binary.macroEnabled.12"));
		map.insert(std::pair<std::string, std::string>("xlsm", "application/vnd.ms-excel.sheet.macroEnabled.12"));
		map.insert(std::pair<std::string, std::string>("xltm", "application/vnd.ms-excel.template.macroEnabled.12"));
		map.insert(std::pair<std::string, std::string>("xls", "application/vnd.ms-excel"));
		map.insert(std::pair<std::string, std::string>("xlm", "application/vnd.ms-excel"));
		map.insert(std::pair<std::string, std::string>("xla", "application/vnd.ms-excel"));
		map.insert(std::pair<std::string, std::string>("xlc", "application/vnd.ms-excel"));
		map.insert(std::pair<std::string, std::string>("xlt", "application/vnd.ms-excel"));
		map.insert(std::pair<std::string, std::string>("xlw", "application/vnd.ms-excel"));
		map.insert(std::pair<std::string, std::string>("eot", "application/vnd.ms-fontobject"));
		map.insert(std::pair<std::string, std::string>("chm", "application/vnd.ms-htmlhelp"));
		map.insert(std::pair<std::string, std::string>("ims", "application/vnd.ms-ims"));
		map.insert(std::pair<std::string, std::string>("lrm", "application/vnd.ms-lrm"));
		map.insert(std::pair<std::string, std::string>("thmx", "application/vnd.ms-officetheme"));
		map.insert(std::pair<std::string, std::string>("ppam", "application/vnd.ms-powerpoint.addin.macroEnabled.12"));
		map.insert(std::pair<std::string, std::string>("ppt", "application/vnd.ms-powerpoint"));
		map.insert(std::pair<std::string, std::string>("pps", "application/vnd.ms-powerpoint"));
		map.insert(std::pair<std::string, std::string>("pot", "application/vnd.ms-powerpoint"));
		map.insert(std::pair<std::string, std::string>("pptm", "application/vnd.ms-powerpoint.presentation.macroEnabled.12"));
		map.insert(std::pair<std::string, std::string>("sldm", "application/vnd.ms-powerpoint.slide.macroEnabled.12"));
		map.insert(std::pair<std::string, std::string>("ppsm", "application/vnd.ms-powerpoint.slideshow.macroEnabled.12"));
		map.insert(std::pair<std::string, std::string>("potm", "application/vnd.ms-powerpoint.template.macroEnabled.12"));
		map.insert(std::pair<std::string, std::string>("mpp", "application/vnd.ms-project"));
		map.insert(std::pair<std::string, std::string>("mpt", "application/vnd.ms-project"));
		map.insert(std::pair<std::string, std::string>("tnef", "application/vnd.ms-tnef"));
		map.insert(std::pair<std::string, std::string>("tnf", "application/vnd.ms-tnef"));
		map.insert(std::pair<std::string, std::string>("docm", "application/vnd.ms-word.document.macroEnabled.12"));
		map.insert(std::pair<std::string, std::string>("dotm", "application/vnd.ms-word.template.macroEnabled.12"));
		map.insert(std::pair<std::string, std::string>("wcm", "application/vnd.ms-works"));
		map.insert(std::pair<std::string, std::string>("wdb", "application/vnd.ms-works"));
		map.insert(std::pair<std::string, std::string>("wks", "application/vnd.ms-works"));
		map.insert(std::pair<std::string, std::string>("wps", "application/vnd.ms-works"));
		map.insert(std::pair<std::string, std::string>("wpl", "application/vnd.ms-wpl"));
		map.insert(std::pair<std::string, std::string>("xps", "application/vnd.ms-xpsdocument"));
		map.insert(std::pair<std::string, std::string>("cif", "application/vnd.multiad.creator.cif"));
		map.insert(std::pair<std::string, std::string>("crtr", "application/vnd.multiad.creator"));
		map.insert(std::pair<std::string, std::string>("mus", "application/vnd.musician"));
		map.insert(std::pair<std::string, std::string>("msty", "application/vnd.muvee.style"));
		map.insert(std::pair<std::string, std::string>("taglet", "application/vnd.mynfc"));
		map.insert(std::pair<std::string, std::string>("nebul", "application/vnd.nebumind.line"));
		map.insert(std::pair<std::string, std::string>("line", "application/vnd.nebumind.line"));
		map.insert(std::pair<std::string, std::string>("entity", "application/vnd.nervana"));
		map.insert(std::pair<std::string, std::string>("request", "application/vnd.nervana"));
		map.insert(std::pair<std::string, std::string>("bkm", "application/vnd.nervana"));
		map.insert(std::pair<std::string, std::string>("kcm", "application/vnd.nervana"));
		map.insert(std::pair<std::string, std::string>("nlu", "application/vnd.neurolanguage.nlu"));
		map.insert(std::pair<std::string, std::string>("nimn", "application/vnd.nimn"));
		map.insert(std::pair<std::string, std::string>("nds", "application/vnd.nintendo.nitro.rom"));
		map.insert(std::pair<std::string, std::string>("sfc", "application/vnd.nintendo.snes.rom"));
		map.insert(std::pair<std::string, std::string>("smc", "application/vnd.nintendo.snes.rom"));
		map.insert(std::pair<std::string, std::string>("nitf", "application/vnd.nitf"));
		map.insert(std::pair<std::string, std::string>("nnd", "application/vnd.noblenet-directory"));
		map.insert(std::pair<std::string, std::string>("nns", "application/vnd.noblenet-sealer"));
		map.insert(std::pair<std::string, std::string>("nnw", "application/vnd.noblenet-web"));
		map.insert(std::pair<std::string, std::string>("ac", "application/vnd.nokia.n-gage.ac+xml"));
		map.insert(std::pair<std::string, std::string>("ngdat", "application/vnd.nokia.n-gage.data"));
		map.insert(std::pair<std::string, std::string>("n-gage", "application/vnd.nokia.n-gage.symbian.install"));
		map.insert(std::pair<std::string, std::string>("rpst", "application/vnd.nokia.radio-preset"));
		map.insert(std::pair<std::string, std::string>("rpss", "application/vnd.nokia.radio-presets"));
		map.insert(std::pair<std::string, std::string>("edm", "application/vnd.novadigm.EDM"));
		map.insert(std::pair<std::string, std::string>("edx", "application/vnd.novadigm.EDX"));
		map.insert(std::pair<std::string, std::string>("ext", "application/vnd.novadigm.EXT"));
		map.insert(std::pair<std::string, std::string>("odc", "application/vnd.oasis.opendocument.chart"));
		map.insert(std::pair<std::string, std::string>("otc", "application/vnd.oasis.opendocument.chart-template"));
		map.insert(std::pair<std::string, std::string>("odb", "application/vnd.oasis.opendocument.database"));
		map.insert(std::pair<std::string, std::string>("odf", "application/vnd.oasis.opendocument.formula"));
		map.insert(std::pair<std::string, std::string>("odg", "application/vnd.oasis.opendocument.graphics"));
		map.insert(std::pair<std::string, std::string>("otg", "application/vnd.oasis.opendocument.graphics-template"));
		map.insert(std::pair<std::string, std::string>("odi", "application/vnd.oasis.opendocument.image"));
		map.insert(std::pair<std::string, std::string>("oti", "application/vnd.oasis.opendocument.image-template"));
		map.insert(std::pair<std::string, std::string>("odp", "application/vnd.oasis.opendocument.presentation"));
		map.insert(std::pair<std::string, std::string>("otp", "application/vnd.oasis.opendocument.presentation-template"));
		map.insert(std::pair<std::string, std::string>("ods", "application/vnd.oasis.opendocument.spreadsheet"));
		map.insert(std::pair<std::string, std::string>("ots", "application/vnd.oasis.opendocument.spreadsheet-template"));
		map.insert(std::pair<std::string, std::string>("odm", "application/vnd.oasis.opendocument.text-master"));
		map.insert(std::pair<std::string, std::string>("odt", "application/vnd.oasis.opendocument.text"));
		map.insert(std::pair<std::string, std::string>("ott", "application/vnd.oasis.opendocument.text-template"));
		map.insert(std::pair<std::string, std::string>("oth", "application/vnd.oasis.opendocument.text-web"));
		map.insert(std::pair<std::string, std::string>("xo", "application/vnd.olpc-sugar"));
		map.insert(std::pair<std::string, std::string>("dd2", "application/vnd.oma.dd2+xml"));
		map.insert(std::pair<std::string, std::string>("dd", "application/vnd.oma.dd+xml"));
		map.insert(std::pair<std::string, std::string>("dcf", "application/vnd.oma.drm.content"));
		map.insert(std::pair<std::string, std::string>("o4a", "application/vnd.oma.drm.dcf"));
		map.insert(std::pair<std::string, std::string>("o4v", "application/vnd.oma.drm.dcf"));
		map.insert(std::pair<std::string, std::string>("dm", "application/vnd.oma.drm.message"));
		map.insert(std::pair<std::string, std::string>("drc", "application/vnd.oma.drm.rights+wbxml"));
		map.insert(std::pair<std::string, std::string>("dr", "application/vnd.oma.drm.rights+xml"));
		map.insert(std::pair<std::string, std::string>("tam", "application/vnd.onepager"));
		map.insert(std::pair<std::string, std::string>("tamp", "application/vnd.onepagertamp"));
		map.insert(std::pair<std::string, std::string>("tamx", "application/vnd.onepagertamx"));
		map.insert(std::pair<std::string, std::string>("tatp", "application/vnd.onepagertatp"));
		map.insert(std::pair<std::string, std::string>("tat", "application/vnd.onepagertat"));
		map.insert(std::pair<std::string, std::string>("tatx", "application/vnd.onepagertatx"));
		map.insert(std::pair<std::string, std::string>("obg", "application/vnd.openblox.game-binary"));
		map.insert(std::pair<std::string, std::string>("obgx", "application/vnd.openblox.game+xml"));
		map.insert(std::pair<std::string, std::string>("oeb", "application/vnd.openeye.oeb"));
		map.insert(std::pair<std::string, std::string>("oxt", "application/vnd.openofficeorg.extension"));
		map.insert(std::pair<std::string, std::string>("osm", "application/vnd.openstreetmap.data+xml"));
		map.insert(std::pair<std::string, std::string>("pptx", "application/vnd.openxmlformats-officedocument.presentationml.presentation"));
		map.insert(std::pair<std::string, std::string>("ppsx", "application/vnd.openxmlformats-officedocument.presentationml.slideshow"));
		map.insert(std::pair<std::string, std::string>("sldx", "application/vnd.openxmlformats-officedocument.presentationml.slide"));
		map.insert(std::pair<std::string, std::string>("potx", "application/vnd.openxmlformats-officedocument.presentationml.template"));
		map.insert(std::pair<std::string, std::string>("xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"));
		map.insert(std::pair<std::string, std::string>("xltx", "application/vnd.openxmlformats-officedocument.spreadsheetml.template"));
		map.insert(std::pair<std::string, std::string>("docx", "application/vnd.openxmlformats-officedocument.wordprocessingml.document"));
		map.insert(std::pair<std::string, std::string>("dotx", "application/vnd.openxmlformats-officedocument.wordprocessingml.template"));
		map.insert(std::pair<std::string, std::string>("ndc", "application/vnd.osa.netdeploy"));
		map.insert(std::pair<std::string, std::string>("mgp", "application/vnd.osgeo.mapguide.package"));
		map.insert(std::pair<std::string, std::string>("dp", "application/vnd.osgi.dp"));
		map.insert(std::pair<std::string, std::string>("esa", "application/vnd.osgi.subsystem"));
		map.insert(std::pair<std::string, std::string>("oxlicg", "application/vnd.oxli.countgraph"));
		map.insert(std::pair<std::string, std::string>("prc", "application/vnd.palm"));
		map.insert(std::pair<std::string, std::string>("pdb", "application/vnd.palm"));
		map.insert(std::pair<std::string, std::string>("pqa", "application/vnd.palm"));
		map.insert(std::pair<std::string, std::string>("oprc", "application/vnd.palm"));
		map.insert(std::pair<std::string, std::string>("plp", "application/vnd.panoply"));
		map.insert(std::pair<std::string, std::string>("dive", "application/vnd.patentdive"));
		map.insert(std::pair<std::string, std::string>("paw", "application/vnd.pawaafile"));
		map.insert(std::pair<std::string, std::string>("str", "application/vnd.pg.format"));
		map.insert(std::pair<std::string, std::string>("ei6", "application/vnd.pg.osasli"));
		map.insert(std::pair<std::string, std::string>("pil", "application/vnd.piaccess.application-licence"));
		map.insert(std::pair<std::string, std::string>("efif", "application/vnd.picsel"));
		map.insert(std::pair<std::string, std::string>("wg", "application/vnd.pmi.widget"));
		map.insert(std::pair<std::string, std::string>("plf", "application/vnd.pocketlearn"));
		map.insert(std::pair<std::string, std::string>("pbd", "application/vnd.powerbuilder6"));
		map.insert(std::pair<std::string, std::string>("preminet", "application/vnd.preminet"));
		map.insert(std::pair<std::string, std::string>("box", "application/vnd.previewsystems.box"));
		map.insert(std::pair<std::string, std::string>("vbox", "application/vnd.previewsystems.box"));
		map.insert(std::pair<std::string, std::string>("mgz", "application/vnd.proteus.magazine"));
		map.insert(std::pair<std::string, std::string>("psfs", "application/vnd.psfs"));
		map.insert(std::pair<std::string, std::string>("qps", "application/vnd.publishare-delta-tree"));
		map.insert(std::pair<std::string, std::string>("ptid", "application/vnd.pvi.ptid1"));
		map.insert(std::pair<std::string, std::string>("bar", "application/vnd.qualcomm.brew-app-res"));
		map.insert(std::pair<std::string, std::string>("qxd", "application/vnd.Quark.QuarkXPress"));
		map.insert(std::pair<std::string, std::string>("qxt", "application/vnd.Quark.QuarkXPress"));
		map.insert(std::pair<std::string, std::string>("qwd", "application/vnd.Quark.QuarkXPress"));
		map.insert(std::pair<std::string, std::string>("qwt", "application/vnd.Quark.QuarkXPress"));
		map.insert(std::pair<std::string, std::string>("qxl", "application/vnd.Quark.QuarkXPress"));
		map.insert(std::pair<std::string, std::string>("qxb", "application/vnd.Quark.QuarkXPress"));
		map.insert(std::pair<std::string, std::string>("quox", "application/vnd.quobject-quoxdocument"));
		map.insert(std::pair<std::string, std::string>("quiz", "application/vnd.quobject-quoxdocument"));
		map.insert(std::pair<std::string, std::string>("tree", "application/vnd.rainstor.data"));
		map.insert(std::pair<std::string, std::string>("rar", "application/vnd.rar"));
		map.insert(std::pair<std::string, std::string>("bed", "application/vnd.realvnc.bed"));
		map.insert(std::pair<std::string, std::string>("mxl", "application/vnd.recordare.musicxml"));
		map.insert(std::pair<std::string, std::string>("cryptonote", "application/vnd.rig.cryptonote"));
		map.insert(std::pair<std::string, std::string>("link66", "application/vnd.route66.link66+xml"));
		map.insert(std::pair<std::string, std::string>("st", "application/vnd.sailingtracker.track"));
		map.insert(std::pair<std::string, std::string>("SAR", "application/vnd.sar"));
		map.insert(std::pair<std::string, std::string>("scd", "application/vnd.scribus"));
		map.insert(std::pair<std::string, std::string>("sla", "application/vnd.scribus"));
		map.insert(std::pair<std::string, std::string>("slaz", "application/vnd.scribus"));
		map.insert(std::pair<std::string, std::string>("s3df", "application/vnd.sealed.3df"));
		map.insert(std::pair<std::string, std::string>("scsf", "application/vnd.sealed.csf"));
		map.insert(std::pair<std::string, std::string>("sdoc", "application/vnd.sealed.doc"));
		map.insert(std::pair<std::string, std::string>("sdo", "application/vnd.sealed.doc"));
		map.insert(std::pair<std::string, std::string>("s1w", "application/vnd.sealed.doc"));
		map.insert(std::pair<std::string, std::string>("seml", "application/vnd.sealed.eml"));
		map.insert(std::pair<std::string, std::string>("sem", "application/vnd.sealed.eml"));
		map.insert(std::pair<std::string, std::string>("stml", "application/vnd.sealedmedia.softseal.html"));
		map.insert(std::pair<std::string, std::string>("s1h", "application/vnd.sealedmedia.softseal.html"));
		map.insert(std::pair<std::string, std::string>("spdf", "application/vnd.sealedmedia.softseal.pdf"));
		map.insert(std::pair<std::string, std::string>("spd", "application/vnd.sealedmedia.softseal.pdf"));
		map.insert(std::pair<std::string, std::string>("s1a", "application/vnd.sealedmedia.softseal.pdf"));
		map.insert(std::pair<std::string, std::string>("smht", "application/vnd.sealed.mht"));
		map.insert(std::pair<std::string, std::string>("smh", "application/vnd.sealed.mht"));
		map.insert(std::pair<std::string, std::string>("sppt", "application/vnd.sealed.ppt"));
		map.insert(std::pair<std::string, std::string>("s1p", "application/vnd.sealed.ppt"));
		map.insert(std::pair<std::string, std::string>("stif", "application/vnd.sealed.tiff"));
		map.insert(std::pair<std::string, std::string>("sxls", "application/vnd.sealed.xls"));
		map.insert(std::pair<std::string, std::string>("sxl", "application/vnd.sealed.xls"));
		map.insert(std::pair<std::string, std::string>("s1e", "application/vnd.sealed.xls"));
		map.insert(std::pair<std::string, std::string>("see", "application/vnd.seemail"));
		map.insert(std::pair<std::string, std::string>("sema", "application/vnd.sema"));
		map.insert(std::pair<std::string, std::string>("semd", "application/vnd.semd"));
		map.insert(std::pair<std::string, std::string>("semf", "application/vnd.semf"));
		map.insert(std::pair<std::string, std::string>("ssv", "application/vnd.shade-save-file"));
		map.insert(std::pair<std::string, std::string>("ifm", "application/vnd.shana.informed.formdata"));
		map.insert(std::pair<std::string, std::string>("itp", "application/vnd.shana.informed.formtemplate"));
		map.insert(std::pair<std::string, std::string>("iif", "application/vnd.shana.informed.interchange"));
		map.insert(std::pair<std::string, std::string>("ipk", "application/vnd.shana.informed.package"));
		map.insert(std::pair<std::string, std::string>("shp", "application/vnd.shp"));
		map.insert(std::pair<std::string, std::string>("shx", "application/vnd.shx"));
		map.insert(std::pair<std::string, std::string>("sr", "application/vnd.sigrok.session"));
		map.insert(std::pair<std::string, std::string>("twd", "application/vnd.SimTech-MindMapper"));
		map.insert(std::pair<std::string, std::string>("twds", "application/vnd.SimTech-MindMapper"));
		map.insert(std::pair<std::string, std::string>("mmf", "application/vnd.smaf"));
		map.insert(std::pair<std::string, std::string>("notebook", "application/vnd.smart.notebook"));
		map.insert(std::pair<std::string, std::string>("teacher", "application/vnd.smart.teacher"));
		map.insert(std::pair<std::string, std::string>("ptrom", "application/vnd.snesdev-page-table"));
		map.insert(std::pair<std::string, std::string>("pt", "application/vnd.snesdev-page-table"));
		map.insert(std::pair<std::string, std::string>("fo", "application/vnd.software602.filler.form+xml"));
		map.insert(std::pair<std::string, std::string>("zfo", "application/vnd.software602.filler.form-xml-zip"));
		map.insert(std::pair<std::string, std::string>("sdkm", "application/vnd.solent.sdkm+xml"));
		map.insert(std::pair<std::string, std::string>("sdkd", "application/vnd.solent.sdkm+xml"));
		map.insert(std::pair<std::string, std::string>("dxp", "application/vnd.spotfire.dxp"));
		map.insert(std::pair<std::string, std::string>("sfs", "application/vnd.spotfire.sfs"));
		map.insert(std::pair<std::string, std::string>("sqlite", "application/vnd.sqlite3"));
		map.insert(std::pair<std::string, std::string>("sqlite3", "application/vnd.sqlite3"));
		map.insert(std::pair<std::string, std::string>("smzip", "application/vnd.stepmania.package"));
		map.insert(std::pair<std::string, std::string>("sm", "application/vnd.stepmania.stepchart"));
		map.insert(std::pair<std::string, std::string>("wadl", "application/vnd.sun.wadl+xml"));
		map.insert(std::pair<std::string, std::string>("sxc", "application/vnd.sun.xml.calc"));
		map.insert(std::pair<std::string, std::string>("stc", "application/vnd.sun.xml.calc.template"));
		map.insert(std::pair<std::string, std::string>("sxd", "application/vnd.sun.xml.draw"));
		map.insert(std::pair<std::string, std::string>("std", "application/vnd.sun.xml.draw.template"));
		map.insert(std::pair<std::string, std::string>("sxi", "application/vnd.sun.xml.impress"));
		map.insert(std::pair<std::string, std::string>("sti", "application/vnd.sun.xml.impress.template"));
		map.insert(std::pair<std::string, std::string>("sxm", "application/vnd.sun.xml.math"));
		map.insert(std::pair<std::string, std::string>("sxg", "application/vnd.sun.xml.writer.global"));
		map.insert(std::pair<std::string, std::string>("sxw", "application/vnd.sun.xml.writer"));
		map.insert(std::pair<std::string, std::string>("stw", "application/vnd.sun.xml.writer.template"));
		map.insert(std::pair<std::string, std::string>("sus", "application/vnd.sus-calendar"));
		map.insert(std::pair<std::string, std::string>("susp", "application/vnd.sus-calendar"));
		map.insert(std::pair<std::string, std::string>("scl", "application/vnd.sycle+xml"));
		map.insert(std::pair<std::string, std::string>("sis", "application/vnd.symbian.install"));
		map.insert(std::pair<std::string, std::string>("ddf", "application/vnd.syncml.dmddf+xml"));
		map.insert(std::pair<std::string, std::string>("bdm", "application/vnd.syncml.dm+wbxml"));
		map.insert(std::pair<std::string, std::string>("xdm", "application/vnd.syncml.dm+xml"));
		map.insert(std::pair<std::string, std::string>("xsm", "application/vnd.syncml+xml"));
		map.insert(std::pair<std::string, std::string>("tao", "application/vnd.tao.intent-module-archive"));
		map.insert(std::pair<std::string, std::string>("pcap", "application/vnd.tcpdump.pcap"));
		map.insert(std::pair<std::string, std::string>("cap", "application/vnd.tcpdump.pcap"));
		map.insert(std::pair<std::string, std::string>("dmp", "application/vnd.tcpdump.pcap"));
		map.insert(std::pair<std::string, std::string>("qvd", "application/vnd.theqvd"));
		map.insert(std::pair<std::string, std::string>("ppttc", "application/vnd.think-cell.ppttc+json"));
		map.insert(std::pair<std::string, std::string>("vfr", "application/vnd.tml"));
		map.insert(std::pair<std::string, std::string>("viaframe", "application/vnd.tml"));
		map.insert(std::pair<std::string, std::string>("tmo", "application/vnd.tmobile-livetv"));
		map.insert(std::pair<std::string, std::string>("tpt", "application/vnd.trid.tpt"));
		map.insert(std::pair<std::string, std::string>("mxs", "application/vnd.triscape.mxs"));
		map.insert(std::pair<std::string, std::string>("tra", "application/vnd.trueapp"));
		map.insert(std::pair<std::string, std::string>("ufdl", "application/vnd.ufdl"));
		map.insert(std::pair<std::string, std::string>("ufd", "application/vnd.ufdl"));
		map.insert(std::pair<std::string, std::string>("frm", "application/vnd.ufdl"));
		map.insert(std::pair<std::string, std::string>("utz", "application/vnd.uiq.theme"));
		map.insert(std::pair<std::string, std::string>("umj", "application/vnd.umajin"));
		map.insert(std::pair<std::string, std::string>("unityweb", "application/vnd.unity"));
		map.insert(std::pair<std::string, std::string>("uoml", "application/vnd.uoml+xml"));
		map.insert(std::pair<std::string, std::string>("uo", "application/vnd.uoml+xml"));
		map.insert(std::pair<std::string, std::string>("urim", "application/vnd.uri-map"));
		map.insert(std::pair<std::string, std::string>("urimap", "application/vnd.uri-map"));
		map.insert(std::pair<std::string, std::string>("vmt", "application/vnd.valve.source.material"));
		map.insert(std::pair<std::string, std::string>("vcx", "application/vnd.vcx"));
		map.insert(std::pair<std::string, std::string>("mxi", "application/vnd.vd-study"));
		map.insert(std::pair<std::string, std::string>("study-inter", "application/vnd.vd-study"));
		map.insert(std::pair<std::string, std::string>("model-inter", "application/vnd.vd-study"));
		map.insert(std::pair<std::string, std::string>("vwx", "application/vnd.vectorworks"));
		map.insert(std::pair<std::string, std::string>("istc", "application/vnd.veryant.thin"));
		map.insert(std::pair<std::string, std::string>("isws", "application/vnd.veryant.thin"));
		map.insert(std::pair<std::string, std::string>("VES", "application/vnd.ves.encrypted"));
		map.insert(std::pair<std::string, std::string>("vsc", "application/vnd.vidsoft.vidconference"));
		map.insert(std::pair<std::string, std::string>("vis", "application/vnd.visionary"));
		map.insert(std::pair<std::string, std::string>("vsd", "application/vnd.visio"));
		map.insert(std::pair<std::string, std::string>("vst", "application/vnd.visio"));
		map.insert(std::pair<std::string, std::string>("vsw", "application/vnd.visio"));
		map.insert(std::pair<std::string, std::string>("vss", "application/vnd.visio"));
		map.insert(std::pair<std::string, std::string>("vsf", "application/vnd.vsf"));
		map.insert(std::pair<std::string, std::string>("mms", "application/vnd.wap.mms-message"));
		map.insert(std::pair<std::string, std::string>("sic", "application/vnd.wap.sic"));
		map.insert(std::pair<std::string, std::string>("slc", "application/vnd.wap.slc"));
		map.insert(std::pair<std::string, std::string>("wbxml", "application/vnd.wap.wbxml"));
		map.insert(std::pair<std::string, std::string>("wmlc", "application/vnd.wap.wmlc"));
		map.insert(std::pair<std::string, std::string>("wmlsc", "application/vnd.wap.wmlscriptc"));
		map.insert(std::pair<std::string, std::string>("wtb", "application/vnd.webturbo"));
		map.insert(std::pair<std::string, std::string>("p2p", "application/vnd.wfa.p2p"));
		map.insert(std::pair<std::string, std::string>("wsc", "application/vnd.wfa.wsc"));
		map.insert(std::pair<std::string, std::string>("wmc", "application/vnd.wmc"));
		map.insert(std::pair<std::string, std::string>("m", "application/vnd.wolfram.mathematica.package"));
		map.insert(std::pair<std::string, std::string>("nbp", "application/vnd.wolfram.player"));
		map.insert(std::pair<std::string, std::string>("wpd", "application/vnd.wordperfect"));
		map.insert(std::pair<std::string, std::string>("wqd", "application/vnd.wqd"));
		map.insert(std::pair<std::string, std::string>("stf", "application/vnd.wt.stf"));
		map.insert(std::pair<std::string, std::string>("wv", "application/vnd.wv.csp+wbxml"));
		map.insert(std::pair<std::string, std::string>("xar", "application/vnd.xara"));
		map.insert(std::pair<std::string, std::string>("xfdl", "application/vnd.xfdl"));
		map.insert(std::pair<std::string, std::string>("xfd", "application/vnd.xfdl"));
		map.insert(std::pair<std::string, std::string>("cpkg", "application/vnd.xmpie.cpkg"));
		map.insert(std::pair<std::string, std::string>("dpkg", "application/vnd.xmpie.dpkg"));
		map.insert(std::pair<std::string, std::string>("ppkg", "application/vnd.xmpie.ppkg"));
		map.insert(std::pair<std::string, std::string>("xlim", "application/vnd.xmpie.xlim"));
		map.insert(std::pair<std::string, std::string>("hvd", "application/vnd.yamaha.hv-dic"));
		map.insert(std::pair<std::string, std::string>("hvs", "application/vnd.yamaha.hv-script"));
		map.insert(std::pair<std::string, std::string>("hvp", "application/vnd.yamaha.hv-voice"));
		map.insert(std::pair<std::string, std::string>("osf", "application/vnd.yamaha.openscoreformat"));
		map.insert(std::pair<std::string, std::string>("saf", "application/vnd.yamaha.smaf-audio"));
		map.insert(std::pair<std::string, std::string>("spf", "application/vnd.yamaha.smaf-phrase"));
		map.insert(std::pair<std::string, std::string>("yme", "application/vnd.yaoweme"));
		map.insert(std::pair<std::string, std::string>("cmp", "application/vnd.yellowriver-custom-menu"));
		map.insert(std::pair<std::string, std::string>("zir", "application/vnd.zul"));
		map.insert(std::pair<std::string, std::string>("zirz", "application/vnd.zul"));
		map.insert(std::pair<std::string, std::string>("zaz", "application/vnd.zzazz.deck+xml"));
		map.insert(std::pair<std::string, std::string>("vxml", "application/voicexml+xml"));
		map.insert(std::pair<std::string, std::string>("vcj", "application/voucher-cms+json"));
		map.insert(std::pair<std::string, std::string>("wasm", "application/wasm"));
		map.insert(std::pair<std::string, std::string>("wif", "application/watcherinfo+xml"));
		map.insert(std::pair<std::string, std::string>("wgt", "application/widget"));
		map.insert(std::pair<std::string, std::string>("wsdl", "application/wsdl+xml"));
		map.insert(std::pair<std::string, std::string>("wspolicy", "application/wspolicy+xml"));
		map.insert(std::pair<std::string, std::string>("anx", "application/x-annodex"));
		map.insert(std::pair<std::string, std::string>("bcpio", "application/x-bcpio"));
		map.insert(std::pair<std::string, std::string>("torrent", "application/x-bittorrent"));
		map.insert(std::pair<std::string, std::string>("bz2", "application/x-bzip2"));
		map.insert(std::pair<std::string, std::string>("xav", "application/xcap-att+xml"));
		map.insert(std::pair<std::string, std::string>("xca", "application/xcap-caps+xml"));
		map.insert(std::pair<std::string, std::string>("xdf", "application/xcap-diff+xml"));
		map.insert(std::pair<std::string, std::string>("xel", "application/xcap-el+xml"));
		map.insert(std::pair<std::string, std::string>("xer", "application/xcap-error+xml"));
		map.insert(std::pair<std::string, std::string>("xns", "application/xcap-ns+xml"));
		map.insert(std::pair<std::string, std::string>("vcd", "application/x-cdlink"));
		map.insert(std::pair<std::string, std::string>("crx", "application/x-chrome-extension"));
		map.insert(std::pair<std::string, std::string>("cpio", "application/x-cpio"));
		map.insert(std::pair<std::string, std::string>("csh", "application/x-csh"));
		map.insert(std::pair<std::string, std::string>("dcr", "application/x-director"));
		map.insert(std::pair<std::string, std::string>("dir", "application/x-director"));
		map.insert(std::pair<std::string, std::string>("dxr", "application/x-director"));
		map.insert(std::pair<std::string, std::string>("dvi", "application/x-dvi"));
		map.insert(std::pair<std::string, std::string>("spl", "application/x-futuresplash"));
		map.insert(std::pair<std::string, std::string>("gtar", "application/x-gtar"));
		map.insert(std::pair<std::string, std::string>("hdf", "application/x-hdf"));
		map.insert(std::pair<std::string, std::string>("xhtml", "application/xhtml+xml"));
		map.insert(std::pair<std::string, std::string>("xhtm", "application/xhtml+xml"));
		map.insert(std::pair<std::string, std::string>("xht", "application/xhtml+xml"));
		map.insert(std::pair<std::string, std::string>("jar", "application/x-java-archive"));
		map.insert(std::pair<std::string, std::string>("jnlp", "application/x-java-jnlp-file"));
		map.insert(std::pair<std::string, std::string>("pack", "application/x-java-pack200"));
		map.insert(std::pair<std::string, std::string>("kil", "application/x-killustrator"));
		map.insert(std::pair<std::string, std::string>("latex", "application/x-latex"));
		map.insert(std::pair<std::string, std::string>("xlf", "application/xliff+xml"));
		map.insert(std::pair<std::string, std::string>("dtd", "application/xml-dtd"));
		map.insert(std::pair<std::string, std::string>("nc", "application/x-netcdf"));
		map.insert(std::pair<std::string, std::string>("cdf", "application/x-netcdf"));
		map.insert(std::pair<std::string, std::string>("xop", "application/xop+xml"));
		map.insert(std::pair<std::string, std::string>("pl", "application/x-perl"));
		map.insert(std::pair<std::string, std::string>("rpm", "application/x-rpm"));
		map.insert(std::pair<std::string, std::string>("shar", "application/x-shar"));
		map.insert(std::pair<std::string, std::string>("sh", "application/x-sh"));
		map.insert(std::pair<std::string, std::string>("xsl", "application/xslt+xml"));
		map.insert(std::pair<std::string, std::string>("xslt", "application/xslt+xml"));
		map.insert(std::pair<std::string, std::string>("sit", "application/x-stuffit"));
		map.insert(std::pair<std::string, std::string>("sv4cpio", "application/x-sv4cpio"));
		map.insert(std::pair<std::string, std::string>("sv4crc", "application/x-sv4crc"));
		map.insert(std::pair<std::string, std::string>("tar", "application/x-tar"));
		map.insert(std::pair<std::string, std::string>("tcl", "application/x-tcl"));
		map.insert(std::pair<std::string, std::string>("texinfo", "application/x-texinfo"));
		map.insert(std::pair<std::string, std::string>("texi", "application/x-texinfo"));
		map.insert(std::pair<std::string, std::string>("tex", "application/x-tex"));
		map.insert(std::pair<std::string, std::string>("man", "application/x-troff-man"));
		map.insert(std::pair<std::string, std::string>("1", "application/x-troff-man"));
		map.insert(std::pair<std::string, std::string>("2", "application/x-troff-man"));
		map.insert(std::pair<std::string, std::string>("3", "application/x-troff-man"));
		map.insert(std::pair<std::string, std::string>("4", "application/x-troff-man"));
		map.insert(std::pair<std::string, std::string>("5", "application/x-troff-man"));
		map.insert(std::pair<std::string, std::string>("6", "application/x-troff-man"));
		map.insert(std::pair<std::string, std::string>("7", "application/x-troff-man"));
		map.insert(std::pair<std::string, std::string>("8", "application/x-troff-man"));
		map.insert(std::pair<std::string, std::string>("me", "application/x-troff-me"));
		map.insert(std::pair<std::string, std::string>("ms", "application/x-troff-ms"));
		map.insert(std::pair<std::string, std::string>("ustar", "application/x-ustar"));
		map.insert(std::pair<std::string, std::string>("mxml", "application/xv+xml"));
		map.insert(std::pair<std::string, std::string>("xhvml", "application/xv+xml"));
		map.insert(std::pair<std::string, std::string>("xvml", "application/xv+xml"));
		map.insert(std::pair<std::string, std::string>("xvm", "application/xv+xml"));
		map.insert(std::pair<std::string, std::string>("src", "application/x-wais-source"));
		map.insert(std::pair<std::string, std::string>("xpi", "application/x-xpinstall"));
		map.insert(std::pair<std::string, std::string>("xspf", "application/x-xspf+xml"));
		map.insert(std::pair<std::string, std::string>("xz", "application/x-xz"));
		map.insert(std::pair<std::string, std::string>("yang", "application/yang"));
		map.insert(std::pair<std::string, std::string>("yin", "application/yin+xml"));
		map.insert(std::pair<std::string, std::string>("zip", "application/zip"));
		map.insert(std::pair<std::string, std::string>("zst", "application/zstd"));
		map.insert(std::pair<std::string, std::string>("726", "audio/32kadpcm"));
		map.insert(std::pair<std::string, std::string>("adts", "audio/aac"));
		map.insert(std::pair<std::string, std::string>("aac", "audio/aac"));
		map.insert(std::pair<std::string, std::string>("ass", "audio/aac"));
		map.insert(std::pair<std::string, std::string>("ac3", "audio/ac3"));
		map.insert(std::pair<std::string, std::string>("amr", "audio/AMR"));
		map.insert(std::pair<std::string, std::string>("awb", "audio/AMR-WB"));
		map.insert(std::pair<std::string, std::string>("acn", "audio/asc"));
		map.insert(std::pair<std::string, std::string>("at3", "audio/ATRAC3"));
		map.insert(std::pair<std::string, std::string>("aa3", "audio/ATRAC3"));
		map.insert(std::pair<std::string, std::string>("omg", "audio/ATRAC3"));
		map.insert(std::pair<std::string, std::string>("aal", "audio/ATRAC-ADVANCED-LOSSLESS"));
		map.insert(std::pair<std::string, std::string>("atx", "audio/ATRAC-X"));
		map.insert(std::pair<std::string, std::string>("au", "audio/basic"));
		map.insert(std::pair<std::string, std::string>("snd", "audio/basic"));
		map.insert(std::pair<std::string, std::string>("dls", "audio/dls"));
		map.insert(std::pair<std::string, std::string>("evb", "audio/EVRCB"));
		map.insert(std::pair<std::string, std::string>("evc", "audio/EVRC"));
		map.insert(std::pair<std::string, std::string>("enw", "audio/EVRCNW"));
		map.insert(std::pair<std::string, std::string>("evw", "audio/EVRCWB"));
		map.insert(std::pair<std::string, std::string>("lbc", "audio/iLBC"));
		map.insert(std::pair<std::string, std::string>("l16", "audio/L16"));
		map.insert(std::pair<std::string, std::string>("mhas", "audio/mhas"));
		map.insert(std::pair<std::string, std::string>("mid", "audio/midi"));
		map.insert(std::pair<std::string, std::string>("midi", "audio/midi"));
		map.insert(std::pair<std::string, std::string>("kar", "audio/midi"));
		map.insert(std::pair<std::string, std::string>("mxmf", "audio/mobile-xmf"));
		map.insert(std::pair<std::string, std::string>("m4a", "audio/mp4"));
		map.insert(std::pair<std::string, std::string>("mp3", "audio/mpeg"));
		map.insert(std::pair<std::string, std::string>("mpga", "audio/mpeg"));
		map.insert(std::pair<std::string, std::string>("mp1", "audio/mpeg"));
		map.insert(std::pair<std::string, std::string>("mp2", "audio/mpeg"));
		map.insert(std::pair<std::string, std::string>("oga", "audio/ogg"));
		map.insert(std::pair<std::string, std::string>("ogg", "audio/ogg"));
		map.insert(std::pair<std::string, std::string>("opus", "audio/ogg"));
		map.insert(std::pair<std::string, std::string>("spx", "audio/ogg"));
		map.insert(std::pair<std::string, std::string>("sid", "audio/prs.sid"));
		map.insert(std::pair<std::string, std::string>("psid", "audio/prs.sid"));
		map.insert(std::pair<std::string, std::string>("qcp", "audio/QCELP"));
		map.insert(std::pair<std::string, std::string>("smv", "audio/SMV"));
		map.insert(std::pair<std::string, std::string>("sofa", "audio/sofa"));
		map.insert(std::pair<std::string, std::string>("loas", "audio/usac"));
		map.insert(std::pair<std::string, std::string>("xhe", "audio/usac"));
		map.insert(std::pair<std::string, std::string>("koz", "audio/vnd.audiokoz"));
		map.insert(std::pair<std::string, std::string>("uva", "audio/vnd.dece.audio"));
		map.insert(std::pair<std::string, std::string>("uvva", "audio/vnd.dece.audio"));
		map.insert(std::pair<std::string, std::string>("eol", "audio/vnd.digital-winds"));
		map.insert(std::pair<std::string, std::string>("mlp", "audio/vnd.dolby.mlp"));
		map.insert(std::pair<std::string, std::string>("dts", "audio/vnd.dts"));
		map.insert(std::pair<std::string, std::string>("dtshd", "audio/vnd.dts.hd"));
		map.insert(std::pair<std::string, std::string>("plj", "audio/vnd.everad.plj"));
		map.insert(std::pair<std::string, std::string>("lvp", "audio/vnd.lucent.voice"));
		map.insert(std::pair<std::string, std::string>("pya", "audio/vnd.ms-playready.media.pya"));
		map.insert(std::pair<std::string, std::string>("vbk", "audio/vnd.nortel.vbk"));
		map.insert(std::pair<std::string, std::string>("ecelp4800", "audio/vnd.nuera.ecelp4800"));
		map.insert(std::pair<std::string, std::string>("ecelp7470", "audio/vnd.nuera.ecelp7470"));
		map.insert(std::pair<std::string, std::string>("ecelp9600", "audio/vnd.nuera.ecelp9600"));
		map.insert(std::pair<std::string, std::string>("multitrack", "audio/vnd.presonus.multitrack"));
		map.insert(std::pair<std::string, std::string>("rip", "audio/vnd.rip"));
		map.insert(std::pair<std::string, std::string>("smp3", "audio/vnd.sealedmedia.softseal.mpeg"));
		map.insert(std::pair<std::string, std::string>("smp", "audio/vnd.sealedmedia.softseal.mpeg"));
		map.insert(std::pair<std::string, std::string>("s1m", "audio/vnd.sealedmedia.softseal.mpeg"));
		map.insert(std::pair<std::string, std::string>("aif", "audio/x-aiff"));
		map.insert(std::pair<std::string, std::string>("aiff", "audio/x-aiff"));
		map.insert(std::pair<std::string, std::string>("aifc", "audio/x-aiff"));
		map.insert(std::pair<std::string, std::string>("axa", "audio/x-annodex"));
		map.insert(std::pair<std::string, std::string>("flac", "audio/x-flac"));
		map.insert(std::pair<std::string, std::string>("mka", "audio/x-matroska"));
		map.insert(std::pair<std::string, std::string>("mod", "audio/x-mod"));
		map.insert(std::pair<std::string, std::string>("ult", "audio/x-mod"));
		map.insert(std::pair<std::string, std::string>("uni", "audio/x-mod"));
		map.insert(std::pair<std::string, std::string>("m15", "audio/x-mod"));
		map.insert(std::pair<std::string, std::string>("mtm", "audio/x-mod"));
		map.insert(std::pair<std::string, std::string>("669", "audio/x-mod"));
		map.insert(std::pair<std::string, std::string>("med", "audio/x-mod"));
		map.insert(std::pair<std::string, std::string>("m3u", "audio/x-mpegurl"));
		map.insert(std::pair<std::string, std::string>("wax", "audio/x-ms-wax"));
		map.insert(std::pair<std::string, std::string>("wma", "audio/x-ms-wma"));
		map.insert(std::pair<std::string, std::string>("ram", "audio/x-pn-realaudio"));
		map.insert(std::pair<std::string, std::string>("rm", "audio/x-pn-realaudio"));
		map.insert(std::pair<std::string, std::string>("ra", "audio/x-realaudio"));
		map.insert(std::pair<std::string, std::string>("s3m", "audio/x-s3m"));
		map.insert(std::pair<std::string, std::string>("stm", "audio/x-stm"));
		map.insert(std::pair<std::string, std::string>("wav", "audio/x-wav"));
		map.insert(std::pair<std::string, std::string>("xyz", "chemical/x-xyz"));
		map.insert(std::pair<std::string, std::string>("ttc", "font/collection"));
		map.insert(std::pair<std::string, std::string>("otf", "font/otf"));
		map.insert(std::pair<std::string, std::string>("ttf", "font/ttf"));
		map.insert(std::pair<std::string, std::string>("woff2", "font/woff2"));
		map.insert(std::pair<std::string, std::string>("woff", "font/woff"));
		map.insert(std::pair<std::string, std::string>("exr", "image/aces"));
		map.insert(std::pair<std::string, std::string>("avci", "image/avci"));
		map.insert(std::pair<std::string, std::string>("avcs", "image/avcs"));
		map.insert(std::pair<std::string, std::string>("avif", "image/avif"));
		map.insert(std::pair<std::string, std::string>("hif", "image/avif"));
		map.insert(std::pair<std::string, std::string>("bmp", "image/bmp"));
		map.insert(std::pair<std::string, std::string>("dib", "image/bmp"));
		map.insert(std::pair<std::string, std::string>("cgm", "image/cgm"));
		map.insert(std::pair<std::string, std::string>("drle", "image/dicom-rle"));
		map.insert(std::pair<std::string, std::string>("emf", "image/emf"));
		map.insert(std::pair<std::string, std::string>("fits", "image/fits"));
		map.insert(std::pair<std::string, std::string>("fit", "image/fits"));
		map.insert(std::pair<std::string, std::string>("fts", "image/fits"));
		map.insert(std::pair<std::string, std::string>("gif", "image/gif"));
		map.insert(std::pair<std::string, std::string>("heic", "image/heic"));
		map.insert(std::pair<std::string, std::string>("heics", "image/heic-sequence"));
		map.insert(std::pair<std::string, std::string>("heif", "image/heif"));
		map.insert(std::pair<std::string, std::string>("heifs", "image/heif-sequence"));
		map.insert(std::pair<std::string, std::string>("hej2", "image/hej2k"));
		map.insert(std::pair<std::string, std::string>("hsj2", "image/hsj2"));
		map.insert(std::pair<std::string, std::string>("ief", "image/ief"));
		map.insert(std::pair<std::string, std::string>("jls", "image/jls"));
		map.insert(std::pair<std::string, std::string>("jp2", "image/jp2"));
		map.insert(std::pair<std::string, std::string>("jpg2", "image/jp2"));
		map.insert(std::pair<std::string, std::string>("jpg", "image/jpeg"));
		map.insert(std::pair<std::string, std::string>("jpeg", "image/jpeg"));
		map.insert(std::pair<std::string, std::string>("jpe", "image/jpeg"));
		map.insert(std::pair<std::string, std::string>("jfif", "image/jpeg"));
		map.insert(std::pair<std::string, std::string>("jhc", "image/jphc"));
		map.insert(std::pair<std::string, std::string>("jph", "image/jph"));
		map.insert(std::pair<std::string, std::string>("jpm", "image/jpm"));
		map.insert(std::pair<std::string, std::string>("jpgm", "image/jpm"));
		map.insert(std::pair<std::string, std::string>("jpx", "image/jpx"));
		map.insert(std::pair<std::string, std::string>("jpf", "image/jpx"));
		map.insert(std::pair<std::string, std::string>("jxl", "image/jxl"));
		map.insert(std::pair<std::string, std::string>("jxra", "image/jxrA"));
		map.insert(std::pair<std::string, std::string>("jxr", "image/jxr"));
		map.insert(std::pair<std::string, std::string>("jxrs", "image/jxrS"));
		map.insert(std::pair<std::string, std::string>("jxsc", "image/jxsc"));
		map.insert(std::pair<std::string, std::string>("jxsi", "image/jxsi"));
		map.insert(std::pair<std::string, std::string>("jxs", "image/jxs"));
		map.insert(std::pair<std::string, std::string>("jxss", "image/jxss"));
		map.insert(std::pair<std::string, std::string>("ktx2", "image/ktx2"));
		map.insert(std::pair<std::string, std::string>("ktx", "image/ktx"));
		map.insert(std::pair<std::string, std::string>("png", "image/png"));
		map.insert(std::pair<std::string, std::string>("btif", "image/prs.btif"));
		map.insert(std::pair<std::string, std::string>("btf", "image/prs.btif"));
		map.insert(std::pair<std::string, std::string>("pti", "image/prs.pti"));
		map.insert(std::pair<std::string, std::string>("svg", "image/svg+xml"));
		map.insert(std::pair<std::string, std::string>("svgz", "image/svg+xml"));
		map.insert(std::pair<std::string, std::string>("t38", "image/t38"));
		map.insert(std::pair<std::string, std::string>("tfx", "image/tiff-fx"));
		map.insert(std::pair<std::string, std::string>("tiff", "image/tiff"));
		map.insert(std::pair<std::string, std::string>("tif", "image/tiff"));
		map.insert(std::pair<std::string, std::string>("psd", "image/vnd.adobe.photoshop"));
		map.insert(std::pair<std::string, std::string>("azv", "image/vnd.airzip.accelerator.azv"));
		map.insert(std::pair<std::string, std::string>("uvi", "image/vnd.dece.graphic"));
		map.insert(std::pair<std::string, std::string>("uvvi", "image/vnd.dece.graphic"));
		map.insert(std::pair<std::string, std::string>("uvg", "image/vnd.dece.graphic"));
		map.insert(std::pair<std::string, std::string>("uvvg", "image/vnd.dece.graphic"));
		map.insert(std::pair<std::string, std::string>("djvu", "image/vnd.djvu"));
		map.insert(std::pair<std::string, std::string>("djv", "image/vnd.djvu"));
		map.insert(std::pair<std::string, std::string>("dwg", "image/vnd.dwg"));
		map.insert(std::pair<std::string, std::string>("dxf", "image/vnd.dxf"));
		map.insert(std::pair<std::string, std::string>("fbs", "image/vnd.fastbidsheet"));
		map.insert(std::pair<std::string, std::string>("fpx", "image/vnd.fpx"));
		map.insert(std::pair<std::string, std::string>("fst", "image/vnd.fst"));
		map.insert(std::pair<std::string, std::string>("mmr", "image/vnd.fujixerox.edmics-mmr"));
		map.insert(std::pair<std::string, std::string>("rlc", "image/vnd.fujixerox.edmics-rlc"));
		map.insert(std::pair<std::string, std::string>("pgb", "image/vnd.globalgraphics.pgb"));
		map.insert(std::pair<std::string, std::string>("ico", "image/vnd.microsoft.icon"));
		map.insert(std::pair<std::string, std::string>("apng", "image/vnd.mozilla.apng"));
		map.insert(std::pair<std::string, std::string>("mdi", "image/vnd.ms-modi"));
		map.insert(std::pair<std::string, std::string>("b16", "image/vnd.pco.b16"));
		map.insert(std::pair<std::string, std::string>("hdr", "image/vnd.radiance"));
		map.insert(std::pair<std::string, std::string>("rgbe", "image/vnd.radiance"));
		map.insert(std::pair<std::string, std::string>("xyze", "image/vnd.radiance"));
		map.insert(std::pair<std::string, std::string>("sgif", "image/vnd.sealedmedia.softseal.gif"));
		map.insert(std::pair<std::string, std::string>("sgi", "image/vnd.sealedmedia.softseal.gif"));
		map.insert(std::pair<std::string, std::string>("s1g", "image/vnd.sealedmedia.softseal.gif"));
		map.insert(std::pair<std::string, std::string>("sjpg", "image/vnd.sealedmedia.softseal.jpg"));
		map.insert(std::pair<std::string, std::string>("sjp", "image/vnd.sealedmedia.softseal.jpg"));
		map.insert(std::pair<std::string, std::string>("s1j", "image/vnd.sealedmedia.softseal.jpg"));
		map.insert(std::pair<std::string, std::string>("spng", "image/vnd.sealed.png"));
		map.insert(std::pair<std::string, std::string>("spn", "image/vnd.sealed.png"));
		map.insert(std::pair<std::string, std::string>("s1n", "image/vnd.sealed.png"));
		map.insert(std::pair<std::string, std::string>("tap", "image/vnd.tencent.tap"));
		map.insert(std::pair<std::string, std::string>("vtf", "image/vnd.valve.source.texture"));
		map.insert(std::pair<std::string, std::string>("wbmp", "image/vnd.wap.wbmp"));
		map.insert(std::pair<std::string, std::string>("xif", "image/vnd.xiff"));
		map.insert(std::pair<std::string, std::string>("pcx", "image/vnd.zbrush.pcx"));
		map.insert(std::pair<std::string, std::string>("webp", "image/webp"));
		map.insert(std::pair<std::string, std::string>("wmf", "image/wmf"));
		map.insert(std::pair<std::string, std::string>("ras", "image/x-cmu-raster"));
		map.insert(std::pair<std::string, std::string>("pnm", "image/x-portable-anymap"));
		map.insert(std::pair<std::string, std::string>("pbm", "image/x-portable-bitmap"));
		map.insert(std::pair<std::string, std::string>("pgm", "image/x-portable-graymap"));
		map.insert(std::pair<std::string, std::string>("ppm", "image/x-portable-pixmap"));
		map.insert(std::pair<std::string, std::string>("rgb", "image/x-rgb"));
		map.insert(std::pair<std::string, std::string>("tga", "image/x-targa"));
		map.insert(std::pair<std::string, std::string>("xbm", "image/x-xbitmap"));
		map.insert(std::pair<std::string, std::string>("xpm", "image/x-xpixmap"));
		map.insert(std::pair<std::string, std::string>("xwd", "image/x-xwindowdump"));
		map.insert(std::pair<std::string, std::string>("u8dsn", "message/global-delivery-status"));
		map.insert(std::pair<std::string, std::string>("u8mdn", "message/global-disposition-notification"));
		map.insert(std::pair<std::string, std::string>("u8hdr", "message/global-headers"));
		map.insert(std::pair<std::string, std::string>("u8msg", "message/global"));
		map.insert(std::pair<std::string, std::string>("eml", "message/rfc822"));
		map.insert(std::pair<std::string, std::string>("mail", "message/rfc822"));
		map.insert(std::pair<std::string, std::string>("art", "message/rfc822"));
		map.insert(std::pair<std::string, std::string>("glb", "model/gltf-binary"));
		map.insert(std::pair<std::string, std::string>("gltf", "model/gltf+json"));
		map.insert(std::pair<std::string, std::string>("igs", "model/iges"));
		map.insert(std::pair<std::string, std::string>("iges", "model/iges"));
		map.insert(std::pair<std::string, std::string>("msh", "model/mesh"));
		map.insert(std::pair<std::string, std::string>("mesh", "model/mesh"));
		map.insert(std::pair<std::string, std::string>("silo", "model/mesh"));
		map.insert(std::pair<std::string, std::string>("mtl", "model/mtl"));
		map.insert(std::pair<std::string, std::string>("obj", "model/obj"));
		map.insert(std::pair<std::string, std::string>("stl", "model/stl"));
		map.insert(std::pair<std::string, std::string>("dae", "model/vnd.collada+xml"));
		map.insert(std::pair<std::string, std::string>("dwf", "model/vnd.dwf"));
		map.insert(std::pair<std::string, std::string>("gdl", "model/vnd.gdl"));
		map.insert(std::pair<std::string, std::string>("gsm", "model/vnd.gdl"));
		map.insert(std::pair<std::string, std::string>("win", "model/vnd.gdl"));
		map.insert(std::pair<std::string, std::string>("dor", "model/vnd.gdl"));
		map.insert(std::pair<std::string, std::string>("lmp", "model/vnd.gdl"));
		map.insert(std::pair<std::string, std::string>("rsm", "model/vnd.gdl"));
		map.insert(std::pair<std::string, std::string>("msm", "model/vnd.gdl"));
		map.insert(std::pair<std::string, std::string>("ism", "model/vnd.gdl"));
		map.insert(std::pair<std::string, std::string>("gtw", "model/vnd.gtw"));
		map.insert(std::pair<std::string, std::string>("moml", "model/vnd.moml+xml"));
		map.insert(std::pair<std::string, std::string>("mts", "model/vnd.mts"));
		map.insert(std::pair<std::string, std::string>("ogex", "model/vnd.opengex"));
		map.insert(std::pair<std::string, std::string>("x_b", "model/vnd.parasolid.transmit.binary"));
		map.insert(std::pair<std::string, std::string>("xmt_bin", "model/vnd.parasolid.transmit.binary"));
		map.insert(std::pair<std::string, std::string>("x_t", "model/vnd.parasolid.transmit.text"));
		map.insert(std::pair<std::string, std::string>("xmt_txt", "model/vnd.parasolid.transmit.text"));
		map.insert(std::pair<std::string, std::string>("pyo", "model/vnd.pytha.pyox"));
		map.insert(std::pair<std::string, std::string>("pyox", "model/vnd.pytha.pyox"));
		map.insert(std::pair<std::string, std::string>("vds", "model/vnd.sap.vds"));
		map.insert(std::pair<std::string, std::string>("usdz", "model/vnd.usdz+zip"));
		map.insert(std::pair<std::string, std::string>("bsp", "model/vnd.valve.source.compiled-map"));
		map.insert(std::pair<std::string, std::string>("vtu", "model/vnd.vtu"));
		map.insert(std::pair<std::string, std::string>("wrl", "model/vrml"));
		map.insert(std::pair<std::string, std::string>("vrml", "model/vrml"));
		map.insert(std::pair<std::string, std::string>("x3dv", "model/x3d-vrml"));
		map.insert(std::pair<std::string, std::string>("x3dvz", "model/x3d-vrml"));
		map.insert(std::pair<std::string, std::string>("x3db", "model/x3d+xml"));
		map.insert(std::pair<std::string, std::string>("bmed", "multipart/vnd.bint.med-plus"));
		map.insert(std::pair<std::string, std::string>("vpm", "multipart/voice-message"));
		map.insert(std::pair<std::string, std::string>("appcache", "text/cache-manifest"));
		map.insert(std::pair<std::string, std::string>("manifest", "text/cache-manifest"));
		map.insert(std::pair<std::string, std::string>("ics", "text/calendar"));
		map.insert(std::pair<std::string, std::string>("ifb", "text/calendar"));
		map.insert(std::pair<std::string, std::string>("CQL", "text/cql"));
		map.insert(std::pair<std::string, std::string>("css", "text/css"));
		map.insert(std::pair<std::string, std::string>("csv", "text/csv"));
		map.insert(std::pair<std::string, std::string>("csvs", "text/csv-schema"));
		map.insert(std::pair<std::string, std::string>("soa", "text/dns"));
		map.insert(std::pair<std::string, std::string>("zone", "text/dns"));
		map.insert(std::pair<std::string, std::string>("gff3", "text/gff3"));
		map.insert(std::pair<std::string, std::string>("html", "text/html"));
		map.insert(std::pair<std::string, std::string>("htm", "text/html"));
		map.insert(std::pair<std::string, std::string>("sandboxed", "text/html-sandboxed"));
		map.insert(std::pair<std::string, std::string>("cnd", "text/jcr-cnd"));
		map.insert(std::pair<std::string, std::string>("markdown", "text/markdown"));
		map.insert(std::pair<std::string, std::string>("md", "text/markdown"));
		map.insert(std::pair<std::string, std::string>("miz", "text/mizar"));
		map.insert(std::pair<std::string, std::string>("n3", "text/n3"));
		map.insert(std::pair<std::string, std::string>("txt", "text/plain"));
		map.insert(std::pair<std::string, std::string>("asc", "text/plain"));
		map.insert(std::pair<std::string, std::string>("text", "text/plain"));
		map.insert(std::pair<std::string, std::string>("pm", "text/plain"));
		map.insert(std::pair<std::string, std::string>("el", "text/plain"));
		map.insert(std::pair<std::string, std::string>("c", "text/plain"));
		map.insert(std::pair<std::string, std::string>("h", "text/plain"));
		map.insert(std::pair<std::string, std::string>("cc", "text/plain"));
		map.insert(std::pair<std::string, std::string>("hh", "text/plain"));
		map.insert(std::pair<std::string, std::string>("cxx", "text/plain"));
		map.insert(std::pair<std::string, std::string>("hxx", "text/plain"));
		map.insert(std::pair<std::string, std::string>("f90", "text/plain"));
		map.insert(std::pair<std::string, std::string>("conf", "text/plain"));
		map.insert(std::pair<std::string, std::string>("log", "text/plain"));
		map.insert(std::pair<std::string, std::string>("provn", "text/provenance-notation"));
		map.insert(std::pair<std::string, std::string>("rst", "text/prs.fallenstein.rst"));
		map.insert(std::pair<std::string, std::string>("tag", "text/prs.lines.tag"));
		map.insert(std::pair<std::string, std::string>("dsc", "text/prs.lines.tag"));
		map.insert(std::pair<std::string, std::string>("rtx", "text/richtext"));
		map.insert(std::pair<std::string, std::string>("sgml", "text/SGML"));
		map.insert(std::pair<std::string, std::string>("sgm", "text/SGML"));
		map.insert(std::pair<std::string, std::string>("shaclc", "text/shaclc"));
		map.insert(std::pair<std::string, std::string>("shc", "text/shaclc"));
		map.insert(std::pair<std::string, std::string>("spdx", "text/spdx"));
		map.insert(std::pair<std::string, std::string>("tsv", "text/tab-separated-values"));
		map.insert(std::pair<std::string, std::string>("t", "text/troff"));
		map.insert(std::pair<std::string, std::string>("tr", "text/troff"));
		map.insert(std::pair<std::string, std::string>("roff", "text/troff"));
		map.insert(std::pair<std::string, std::string>("ttl", "text/turtle"));
		map.insert(std::pair<std::string, std::string>("uris", "text/uri-list"));
		map.insert(std::pair<std::string, std::string>("uri", "text/uri-list"));
		map.insert(std::pair<std::string, std::string>("vcf", "text/vcard"));
		map.insert(std::pair<std::string, std::string>("vcard", "text/vcard"));
		map.insert(std::pair<std::string, std::string>("a", "text/vnd.a"));
		map.insert(std::pair<std::string, std::string>("abc", "text/vnd.abc"));
		map.insert(std::pair<std::string, std::string>("ascii", "text/vnd.ascii-art"));
		map.insert(std::pair<std::string, std::string>("copyright", "text/vnd.debian.copyright"));
		map.insert(std::pair<std::string, std::string>("dms", "text/vnd.DMClientScript"));
		map.insert(std::pair<std::string, std::string>("sub", "text/vnd.dvb.subtitle"));
		map.insert(std::pair<std::string, std::string>("jtd", "text/vnd.esmertec.theme-descriptor"));
		map.insert(std::pair<std::string, std::string>("flt", "text/vnd.ficlab.flt"));
		map.insert(std::pair<std::string, std::string>("fly", "text/vnd.fly"));
		map.insert(std::pair<std::string, std::string>("flx", "text/vnd.fmi.flexstor"));
		map.insert(std::pair<std::string, std::string>("gv", "text/vnd.graphviz"));
		map.insert(std::pair<std::string, std::string>("dot", "text/vnd.graphviz"));
		map.insert(std::pair<std::string, std::string>("hans", "text/vnd.hans"));
		map.insert(std::pair<std::string, std::string>("hgl", "text/vnd.hgl"));
		map.insert(std::pair<std::string, std::string>("3dml", "text/vnd.in3d.3dml"));
		map.insert(std::pair<std::string, std::string>("3dm", "text/vnd.in3d.3dml"));
		map.insert(std::pair<std::string, std::string>("spot", "text/vnd.in3d.spot"));
		map.insert(std::pair<std::string, std::string>("spo", "text/vnd.in3d.spot"));
		map.insert(std::pair<std::string, std::string>("mpf", "text/vnd.ms-mediapackage"));
		map.insert(std::pair<std::string, std::string>("ccc", "text/vnd.net2phone.commcenter.command"));
		map.insert(std::pair<std::string, std::string>("mc2", "text/vnd.senx.warpscript"));
		map.insert(std::pair<std::string, std::string>("uric", "text/vnd.si.uricatalogue"));
		map.insert(std::pair<std::string, std::string>("sos", "text/vnd.sosi"));
		map.insert(std::pair<std::string, std::string>("jad", "text/vnd.sun.j2me.app-descriptor"));
		map.insert(std::pair<std::string, std::string>("ts", "text/vnd.trolltech.linguist"));
		map.insert(std::pair<std::string, std::string>("si", "text/vnd.wap.si"));
		map.insert(std::pair<std::string, std::string>("sl", "text/vnd.wap.sl"));
		map.insert(std::pair<std::string, std::string>("wmls", "text/vnd.wap.wmlscript"));
		map.insert(std::pair<std::string, std::string>("wml", "text/vnd.wap.wml"));
		map.insert(std::pair<std::string, std::string>("vtt", "text/vtt"));
		map.insert(std::pair<std::string, std::string>("ent", "text/xml-external-parsed-entity"));
		map.insert(std::pair<std::string, std::string>("xml", "text/xml"));
		map.insert(std::pair<std::string, std::string>("xsd", "text/xml"));
		map.insert(std::pair<std::string, std::string>("rng", "text/xml"));
		map.insert(std::pair<std::string, std::string>("pod", "text/x-pod"));
		map.insert(std::pair<std::string, std::string>("etx", "text/x-setext"));
		map.insert(std::pair<std::string, std::string>("3g2", "video/3gpp2"));
		map.insert(std::pair<std::string, std::string>("3gpp2", "video/3gpp2"));
		map.insert(std::pair<std::string, std::string>("3gp", "video/3gpp"));
		map.insert(std::pair<std::string, std::string>("3gpp", "video/3gpp"));
		map.insert(std::pair<std::string, std::string>("m4s", "video/iso.segment"));
		map.insert(std::pair<std::string, std::string>("mj2", "video/mj2"));
		map.insert(std::pair<std::string, std::string>("mjp2", "video/mj2"));
		map.insert(std::pair<std::string, std::string>("mp4", "video/mp4"));
		map.insert(std::pair<std::string, std::string>("mpg4", "video/mp4"));
		map.insert(std::pair<std::string, std::string>("m4v", "video/mp4"));
		map.insert(std::pair<std::string, std::string>("mpeg", "video/mpeg"));
		map.insert(std::pair<std::string, std::string>("mpg", "video/mpeg"));
		map.insert(std::pair<std::string, std::string>("mpe", "video/mpeg"));
		map.insert(std::pair<std::string, std::string>("m1v", "video/mpeg"));
		map.insert(std::pair<std::string, std::string>("m2v", "video/mpeg"));
		map.insert(std::pair<std::string, std::string>("ogv", "video/ogg"));
		map.insert(std::pair<std::string, std::string>("mov", "video/quicktime"));
		map.insert(std::pair<std::string, std::string>("qt", "video/quicktime"));
		map.insert(std::pair<std::string, std::string>("uvh", "video/vnd.dece.hd"));
		map.insert(std::pair<std::string, std::string>("uvvh", "video/vnd.dece.hd"));
		map.insert(std::pair<std::string, std::string>("uvm", "video/vnd.dece.mobile"));
		map.insert(std::pair<std::string, std::string>("uvvm", "video/vnd.dece.mobile"));
		map.insert(std::pair<std::string, std::string>("uvu", "video/vnd.dece.mp4"));
		map.insert(std::pair<std::string, std::string>("uvvu", "video/vnd.dece.mp4"));
		map.insert(std::pair<std::string, std::string>("uvp", "video/vnd.dece.pd"));
		map.insert(std::pair<std::string, std::string>("uvvp", "video/vnd.dece.pd"));
		map.insert(std::pair<std::string, std::string>("uvs", "video/vnd.dece.sd"));
		map.insert(std::pair<std::string, std::string>("uvvs", "video/vnd.dece.sd"));
		map.insert(std::pair<std::string, std::string>("uvv", "video/vnd.dece.video"));
		map.insert(std::pair<std::string, std::string>("uvvv", "video/vnd.dece.video"));
		map.insert(std::pair<std::string, std::string>("dvb", "video/vnd.dvb.file"));
		map.insert(std::pair<std::string, std::string>("fvt", "video/vnd.fvt"));
		map.insert(std::pair<std::string, std::string>("mxu", "video/vnd.mpegurl"));
		map.insert(std::pair<std::string, std::string>("m4u", "video/vnd.mpegurl"));
		map.insert(std::pair<std::string, std::string>("pyv", "video/vnd.ms-playready.media.pyv"));
		map.insert(std::pair<std::string, std::string>("nim", "video/vnd.nokia.interleaved-multimedia"));
		map.insert(std::pair<std::string, std::string>("bik", "video/vnd.radgamettools.bink"));
		map.insert(std::pair<std::string, std::string>("bk2", "video/vnd.radgamettools.bink"));
		map.insert(std::pair<std::string, std::string>("smk", "video/vnd.radgamettools.smacker"));
		map.insert(std::pair<std::string, std::string>("smov", "video/vnd.sealedmedia.softseal.mov"));
		map.insert(std::pair<std::string, std::string>("smo", "video/vnd.sealedmedia.softseal.mov"));
		map.insert(std::pair<std::string, std::string>("s1q", "video/vnd.sealedmedia.softseal.mov"));
		map.insert(std::pair<std::string, std::string>("smpg", "video/vnd.sealed.mpeg1"));
		map.insert(std::pair<std::string, std::string>("s11", "video/vnd.sealed.mpeg1"));
		map.insert(std::pair<std::string, std::string>("s14", "video/vnd.sealed.mpeg4"));
		map.insert(std::pair<std::string, std::string>("sswf", "video/vnd.sealed.swf"));
		map.insert(std::pair<std::string, std::string>("ssw", "video/vnd.sealed.swf"));
		map.insert(std::pair<std::string, std::string>("viv", "video/vnd.vivo"));
		map.insert(std::pair<std::string, std::string>("yt", "video/vnd.youtube.yt"));
		map.insert(std::pair<std::string, std::string>("webm", "video/webm"));
		map.insert(std::pair<std::string, std::string>("axv", "video/x-annodex"));
		map.insert(std::pair<std::string, std::string>("flv", "video/x-flv"));
		map.insert(std::pair<std::string, std::string>("fxm", "video/x-javafx"));
		map.insert(std::pair<std::string, std::string>("mk3d", "video/x-matroska-3d"));
		map.insert(std::pair<std::string, std::string>("mkv", "video/x-matroska"));
		map.insert(std::pair<std::string, std::string>("asx", "video/x-ms-asf"));
		map.insert(std::pair<std::string, std::string>("avi", "video/x-msvideo"));
		map.insert(std::pair<std::string, std::string>("wmv", "video/x-ms-wmv"));
		map.insert(std::pair<std::string, std::string>("wm", "video/x-ms-wm"));
		map.insert(std::pair<std::string, std::string>("wmx", "video/x-ms-wmx"));
		map.insert(std::pair<std::string, std::string>("wvx", "video/x-ms-wvx"));
		map.insert(std::pair<std::string, std::string>("movie", "video/x-sgi-movie"));
		map.insert(std::pair<std::string, std::string>("ice", "x-conference/x-cooltalk"));
		map.insert(std::pair<std::string, std::string>("sisx", "x-epoc/x-sisx-app"));
		return (map);
	}

	static const std::map<std::string, std::string>		status_code_definitions;
	static const std::map<std::string, std::string>		mime_types;
	std::string											version;
	std::string											status_code;
	std::string											reason_phrase;
	std::list< std::pair<std::string, std::string> >	headers;
	std::string											body;
};

/* ************************************************************************** */
/*                           Function declarations                            */
/* ************************************************************************** */

void	generate_response(const Location_block &location, Response &response, bool request_fail = false);
int		get(const Location_block &location, const Request &request, Response &response);
int		post(const Location_block &location, Request &request, Response &response);
int		delete_(const Location_block &location, const Request &request, Response &response);
int		post_parsing(const Location_block &location, const Request &request, Response &response);
int		set_status_code_and_return(Response &response, const std::string &status_code);

#endif
